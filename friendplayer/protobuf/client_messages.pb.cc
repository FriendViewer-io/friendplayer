// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_messages.proto

#include "client_messages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_client_5fmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientState_client_5fmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_client_5fmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ControllerFrame_client_5fmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_client_5fmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeyboardFrame_client_5fmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_client_5fmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MouseFrame_client_5fmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_client_5fmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestToHost_client_5fmessages_2eproto;
namespace fp_proto {
class KeyboardFrameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KeyboardFrame> _instance;
} _KeyboardFrame_default_instance_;
class MouseFrameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MouseFrame> _instance;
} _MouseFrame_default_instance_;
class ControllerFrameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ControllerFrame> _instance;
} _ControllerFrame_default_instance_;
class RequestToHostDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestToHost> _instance;
} _RequestToHost_default_instance_;
class ClientStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientState> _instance;
} _ClientState_default_instance_;
class ClientDataFrameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientDataFrame> _instance;
  const ::fp_proto::KeyboardFrame* keyboard_;
  const ::fp_proto::MouseFrame* mouse_;
  const ::fp_proto::ControllerFrame* controller_;
  const ::fp_proto::RequestToHost* host_request_;
  const ::fp_proto::ClientState* client_state_;
} _ClientDataFrame_default_instance_;
}  // namespace fp_proto
static void InitDefaultsscc_info_ClientDataFrame_client_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fp_proto::_ClientDataFrame_default_instance_;
    new (ptr) ::fp_proto::ClientDataFrame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fp_proto::ClientDataFrame::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_ClientDataFrame_client_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_ClientDataFrame_client_5fmessages_2eproto}, {
      &scc_info_KeyboardFrame_client_5fmessages_2eproto.base,
      &scc_info_MouseFrame_client_5fmessages_2eproto.base,
      &scc_info_ControllerFrame_client_5fmessages_2eproto.base,
      &scc_info_RequestToHost_client_5fmessages_2eproto.base,
      &scc_info_ClientState_client_5fmessages_2eproto.base,}};

static void InitDefaultsscc_info_ClientState_client_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fp_proto::_ClientState_default_instance_;
    new (ptr) ::fp_proto::ClientState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fp_proto::ClientState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientState_client_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClientState_client_5fmessages_2eproto}, {}};

static void InitDefaultsscc_info_ControllerFrame_client_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fp_proto::_ControllerFrame_default_instance_;
    new (ptr) ::fp_proto::ControllerFrame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fp_proto::ControllerFrame::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ControllerFrame_client_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ControllerFrame_client_5fmessages_2eproto}, {}};

static void InitDefaultsscc_info_KeyboardFrame_client_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fp_proto::_KeyboardFrame_default_instance_;
    new (ptr) ::fp_proto::KeyboardFrame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fp_proto::KeyboardFrame::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeyboardFrame_client_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KeyboardFrame_client_5fmessages_2eproto}, {}};

static void InitDefaultsscc_info_MouseFrame_client_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fp_proto::_MouseFrame_default_instance_;
    new (ptr) ::fp_proto::MouseFrame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fp_proto::MouseFrame::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MouseFrame_client_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MouseFrame_client_5fmessages_2eproto}, {}};

static void InitDefaultsscc_info_RequestToHost_client_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fp_proto::_RequestToHost_default_instance_;
    new (ptr) ::fp_proto::RequestToHost();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fp_proto::RequestToHost::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestToHost_client_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RequestToHost_client_5fmessages_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_client_5fmessages_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_client_5fmessages_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_client_5fmessages_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_client_5fmessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fp_proto::KeyboardFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fp_proto::MouseFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fp_proto::MouseFrame, button_),
  PROTOBUF_FIELD_OFFSET(::fp_proto::MouseFrame, pressed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fp_proto::ControllerFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fp_proto::ControllerFrame, sequence_num_),
  PROTOBUF_FIELD_OFFSET(::fp_proto::ControllerFrame, w_buttons_),
  PROTOBUF_FIELD_OFFSET(::fp_proto::ControllerFrame, b_left_trigger_),
  PROTOBUF_FIELD_OFFSET(::fp_proto::ControllerFrame, b_right_trigger_),
  PROTOBUF_FIELD_OFFSET(::fp_proto::ControllerFrame, s_thumb_lx_),
  PROTOBUF_FIELD_OFFSET(::fp_proto::ControllerFrame, s_thumb_ly_),
  PROTOBUF_FIELD_OFFSET(::fp_proto::ControllerFrame, s_thumb_rx_),
  PROTOBUF_FIELD_OFFSET(::fp_proto::ControllerFrame, s_thumb_ry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fp_proto::RequestToHost, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fp_proto::RequestToHost, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fp_proto::ClientState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fp_proto::ClientState, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fp_proto::ClientDataFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::fp_proto::ClientDataFrame, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fp_proto::ClientDataFrame, frame_id_),
  offsetof(::fp_proto::ClientDataFrameDefaultTypeInternal, keyboard_),
  offsetof(::fp_proto::ClientDataFrameDefaultTypeInternal, mouse_),
  offsetof(::fp_proto::ClientDataFrameDefaultTypeInternal, controller_),
  offsetof(::fp_proto::ClientDataFrameDefaultTypeInternal, host_request_),
  offsetof(::fp_proto::ClientDataFrameDefaultTypeInternal, client_state_),
  PROTOBUF_FIELD_OFFSET(::fp_proto::ClientDataFrame, DataFrame_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::fp_proto::KeyboardFrame)},
  { 5, -1, sizeof(::fp_proto::MouseFrame)},
  { 12, -1, sizeof(::fp_proto::ControllerFrame)},
  { 25, -1, sizeof(::fp_proto::RequestToHost)},
  { 31, -1, sizeof(::fp_proto::ClientState)},
  { 37, -1, sizeof(::fp_proto::ClientDataFrame)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fp_proto::_KeyboardFrame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fp_proto::_MouseFrame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fp_proto::_ControllerFrame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fp_proto::_RequestToHost_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fp_proto::_ClientState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fp_proto::_ClientDataFrame_default_instance_),
};

const char descriptor_table_protodef_client_5fmessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025client_messages.proto\022\010fp_proto\"\017\n\rKey"
  "boardFrame\"\250\001\n\nMouseFrame\0221\n\006button\030\001 \001("
  "\0162!.fp_proto.MouseFrame.MouseButtons\022\017\n\007"
  "pressed\030\002 \001(\010\"V\n\014MouseButtons\022\013\n\007MOUSE_L"
  "\020\000\022\020\n\014MOUSE_MIDDLE\020\001\022\013\n\007MOUSE_R\020\002\022\014\n\010MOU"
  "SE_X1\020\003\022\014\n\010MOUSE_X2\020\004\"\273\001\n\017ControllerFram"
  "e\022\024\n\014sequence_num\030\001 \001(\r\022\021\n\tw_buttons\030\002 \001"
  "(\r\022\026\n\016b_left_trigger\030\003 \001(\r\022\027\n\017b_right_tr"
  "igger\030\004 \001(\r\022\022\n\ns_thumb_LX\030\005 \001(\r\022\022\n\ns_thu"
  "mb_LY\030\006 \001(\r\022\022\n\ns_thumb_RX\030\007 \001(\r\022\022\n\ns_thu"
  "mb_RY\030\010 \001(\r\"\177\n\rRequestToHost\0221\n\004type\030\001 \001"
  "(\0162#.fp_proto.RequestToHost.RequestType\""
  ";\n\013RequestType\022\014\n\010SEND_IDR\020\000\022\016\n\nMUTE_AUD"
  "IO\020\001\022\016\n\nPLAY_AUDIO\020\002\"\224\001\n\013ClientState\022*\n\005"
  "state\030\001 \001(\0162\033.fp_proto.ClientState.State"
  "\"Y\n\005State\022\031\n\025READY_FOR_PPS_SPS_IDR\020\000\022\023\n\017"
  "READY_FOR_VIDEO\020\001\022\r\n\tHEARTBEAT\020\002\022\021\n\rDISC"
  "ONNECTING\020\003\"\225\002\n\017ClientDataFrame\022\020\n\010frame"
  "_id\030\001 \001(\r\022+\n\010keyboard\030\002 \001(\0132\027.fp_proto.K"
  "eyboardFrameH\000\022%\n\005mouse\030\003 \001(\0132\024.fp_proto"
  ".MouseFrameH\000\022/\n\ncontroller\030\004 \001(\0132\031.fp_p"
  "roto.ControllerFrameH\000\022/\n\014host_request\030\005"
  " \001(\0132\027.fp_proto.RequestToHostH\000\022-\n\014clien"
  "t_state\030\006 \001(\0132\025.fp_proto.ClientStateH\000B\013"
  "\n\tDataFrameb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_client_5fmessages_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_client_5fmessages_2eproto_sccs[6] = {
  &scc_info_ClientDataFrame_client_5fmessages_2eproto.base,
  &scc_info_ClientState_client_5fmessages_2eproto.base,
  &scc_info_ControllerFrame_client_5fmessages_2eproto.base,
  &scc_info_KeyboardFrame_client_5fmessages_2eproto.base,
  &scc_info_MouseFrame_client_5fmessages_2eproto.base,
  &scc_info_RequestToHost_client_5fmessages_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_client_5fmessages_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_client_5fmessages_2eproto = {
  false, false, descriptor_table_protodef_client_5fmessages_2eproto, "client_messages.proto", 979,
  &descriptor_table_client_5fmessages_2eproto_once, descriptor_table_client_5fmessages_2eproto_sccs, descriptor_table_client_5fmessages_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_client_5fmessages_2eproto::offsets,
  file_level_metadata_client_5fmessages_2eproto, 6, file_level_enum_descriptors_client_5fmessages_2eproto, file_level_service_descriptors_client_5fmessages_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_client_5fmessages_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_client_5fmessages_2eproto)), true);
namespace fp_proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MouseFrame_MouseButtons_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_client_5fmessages_2eproto);
  return file_level_enum_descriptors_client_5fmessages_2eproto[0];
}
bool MouseFrame_MouseButtons_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MouseFrame_MouseButtons MouseFrame::MOUSE_L;
constexpr MouseFrame_MouseButtons MouseFrame::MOUSE_MIDDLE;
constexpr MouseFrame_MouseButtons MouseFrame::MOUSE_R;
constexpr MouseFrame_MouseButtons MouseFrame::MOUSE_X1;
constexpr MouseFrame_MouseButtons MouseFrame::MOUSE_X2;
constexpr MouseFrame_MouseButtons MouseFrame::MouseButtons_MIN;
constexpr MouseFrame_MouseButtons MouseFrame::MouseButtons_MAX;
constexpr int MouseFrame::MouseButtons_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RequestToHost_RequestType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_client_5fmessages_2eproto);
  return file_level_enum_descriptors_client_5fmessages_2eproto[1];
}
bool RequestToHost_RequestType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RequestToHost_RequestType RequestToHost::SEND_IDR;
constexpr RequestToHost_RequestType RequestToHost::MUTE_AUDIO;
constexpr RequestToHost_RequestType RequestToHost::PLAY_AUDIO;
constexpr RequestToHost_RequestType RequestToHost::RequestType_MIN;
constexpr RequestToHost_RequestType RequestToHost::RequestType_MAX;
constexpr int RequestToHost::RequestType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientState_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_client_5fmessages_2eproto);
  return file_level_enum_descriptors_client_5fmessages_2eproto[2];
}
bool ClientState_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ClientState_State ClientState::READY_FOR_PPS_SPS_IDR;
constexpr ClientState_State ClientState::READY_FOR_VIDEO;
constexpr ClientState_State ClientState::HEARTBEAT;
constexpr ClientState_State ClientState::DISCONNECTING;
constexpr ClientState_State ClientState::State_MIN;
constexpr ClientState_State ClientState::State_MAX;
constexpr int ClientState::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void KeyboardFrame::InitAsDefaultInstance() {
}
class KeyboardFrame::_Internal {
 public:
};

KeyboardFrame::KeyboardFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fp_proto.KeyboardFrame)
}
KeyboardFrame::KeyboardFrame(const KeyboardFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fp_proto.KeyboardFrame)
}

void KeyboardFrame::SharedCtor() {
}

KeyboardFrame::~KeyboardFrame() {
  // @@protoc_insertion_point(destructor:fp_proto.KeyboardFrame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KeyboardFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void KeyboardFrame::ArenaDtor(void* object) {
  KeyboardFrame* _this = reinterpret_cast< KeyboardFrame* >(object);
  (void)_this;
}
void KeyboardFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KeyboardFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KeyboardFrame& KeyboardFrame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KeyboardFrame_client_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void KeyboardFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:fp_proto.KeyboardFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyboardFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KeyboardFrame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fp_proto.KeyboardFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fp_proto.KeyboardFrame)
  return target;
}

size_t KeyboardFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fp_proto.KeyboardFrame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyboardFrame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fp_proto.KeyboardFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyboardFrame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KeyboardFrame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fp_proto.KeyboardFrame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fp_proto.KeyboardFrame)
    MergeFrom(*source);
  }
}

void KeyboardFrame::MergeFrom(const KeyboardFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fp_proto.KeyboardFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void KeyboardFrame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fp_proto.KeyboardFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyboardFrame::CopyFrom(const KeyboardFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fp_proto.KeyboardFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyboardFrame::IsInitialized() const {
  return true;
}

void KeyboardFrame::InternalSwap(KeyboardFrame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyboardFrame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MouseFrame::InitAsDefaultInstance() {
}
class MouseFrame::_Internal {
 public:
};

MouseFrame::MouseFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fp_proto.MouseFrame)
}
MouseFrame::MouseFrame(const MouseFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&button_, &from.button_,
    static_cast<size_t>(reinterpret_cast<char*>(&pressed_) -
    reinterpret_cast<char*>(&button_)) + sizeof(pressed_));
  // @@protoc_insertion_point(copy_constructor:fp_proto.MouseFrame)
}

void MouseFrame::SharedCtor() {
  ::memset(&button_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pressed_) -
      reinterpret_cast<char*>(&button_)) + sizeof(pressed_));
}

MouseFrame::~MouseFrame() {
  // @@protoc_insertion_point(destructor:fp_proto.MouseFrame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MouseFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MouseFrame::ArenaDtor(void* object) {
  MouseFrame* _this = reinterpret_cast< MouseFrame* >(object);
  (void)_this;
}
void MouseFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MouseFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MouseFrame& MouseFrame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MouseFrame_client_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void MouseFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:fp_proto.MouseFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&button_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pressed_) -
      reinterpret_cast<char*>(&button_)) + sizeof(pressed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MouseFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .fp_proto.MouseFrame.MouseButtons button = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_button(static_cast<::fp_proto::MouseFrame_MouseButtons>(val));
        } else goto handle_unusual;
        continue;
      // bool pressed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pressed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MouseFrame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fp_proto.MouseFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fp_proto.MouseFrame.MouseButtons button = 1;
  if (this->button() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_button(), target);
  }

  // bool pressed = 2;
  if (this->pressed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_pressed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fp_proto.MouseFrame)
  return target;
}

size_t MouseFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fp_proto.MouseFrame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .fp_proto.MouseFrame.MouseButtons button = 1;
  if (this->button() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_button());
  }

  // bool pressed = 2;
  if (this->pressed() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MouseFrame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fp_proto.MouseFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const MouseFrame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MouseFrame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fp_proto.MouseFrame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fp_proto.MouseFrame)
    MergeFrom(*source);
  }
}

void MouseFrame::MergeFrom(const MouseFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fp_proto.MouseFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.button() != 0) {
    _internal_set_button(from._internal_button());
  }
  if (from.pressed() != 0) {
    _internal_set_pressed(from._internal_pressed());
  }
}

void MouseFrame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fp_proto.MouseFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MouseFrame::CopyFrom(const MouseFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fp_proto.MouseFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MouseFrame::IsInitialized() const {
  return true;
}

void MouseFrame::InternalSwap(MouseFrame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MouseFrame, pressed_)
      + sizeof(MouseFrame::pressed_)
      - PROTOBUF_FIELD_OFFSET(MouseFrame, button_)>(
          reinterpret_cast<char*>(&button_),
          reinterpret_cast<char*>(&other->button_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MouseFrame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ControllerFrame::InitAsDefaultInstance() {
}
class ControllerFrame::_Internal {
 public:
};

ControllerFrame::ControllerFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fp_proto.ControllerFrame)
}
ControllerFrame::ControllerFrame(const ControllerFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&sequence_num_, &from.sequence_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&s_thumb_ry_) -
    reinterpret_cast<char*>(&sequence_num_)) + sizeof(s_thumb_ry_));
  // @@protoc_insertion_point(copy_constructor:fp_proto.ControllerFrame)
}

void ControllerFrame::SharedCtor() {
  ::memset(&sequence_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s_thumb_ry_) -
      reinterpret_cast<char*>(&sequence_num_)) + sizeof(s_thumb_ry_));
}

ControllerFrame::~ControllerFrame() {
  // @@protoc_insertion_point(destructor:fp_proto.ControllerFrame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ControllerFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ControllerFrame::ArenaDtor(void* object) {
  ControllerFrame* _this = reinterpret_cast< ControllerFrame* >(object);
  (void)_this;
}
void ControllerFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControllerFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ControllerFrame& ControllerFrame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ControllerFrame_client_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void ControllerFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:fp_proto.ControllerFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sequence_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s_thumb_ry_) -
      reinterpret_cast<char*>(&sequence_num_)) + sizeof(s_thumb_ry_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControllerFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 sequence_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sequence_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 w_buttons = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          w_buttons_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 b_left_trigger = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          b_left_trigger_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 b_right_trigger = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          b_right_trigger_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s_thumb_LX = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          s_thumb_lx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s_thumb_LY = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          s_thumb_ly_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s_thumb_RX = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          s_thumb_rx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s_thumb_RY = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          s_thumb_ry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControllerFrame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fp_proto.ControllerFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sequence_num = 1;
  if (this->sequence_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sequence_num(), target);
  }

  // uint32 w_buttons = 2;
  if (this->w_buttons() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_w_buttons(), target);
  }

  // uint32 b_left_trigger = 3;
  if (this->b_left_trigger() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_b_left_trigger(), target);
  }

  // uint32 b_right_trigger = 4;
  if (this->b_right_trigger() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_b_right_trigger(), target);
  }

  // uint32 s_thumb_LX = 5;
  if (this->s_thumb_lx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_s_thumb_lx(), target);
  }

  // uint32 s_thumb_LY = 6;
  if (this->s_thumb_ly() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_s_thumb_ly(), target);
  }

  // uint32 s_thumb_RX = 7;
  if (this->s_thumb_rx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_s_thumb_rx(), target);
  }

  // uint32 s_thumb_RY = 8;
  if (this->s_thumb_ry() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_s_thumb_ry(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fp_proto.ControllerFrame)
  return target;
}

size_t ControllerFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fp_proto.ControllerFrame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 sequence_num = 1;
  if (this->sequence_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sequence_num());
  }

  // uint32 w_buttons = 2;
  if (this->w_buttons() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_w_buttons());
  }

  // uint32 b_left_trigger = 3;
  if (this->b_left_trigger() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_b_left_trigger());
  }

  // uint32 b_right_trigger = 4;
  if (this->b_right_trigger() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_b_right_trigger());
  }

  // uint32 s_thumb_LX = 5;
  if (this->s_thumb_lx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s_thumb_lx());
  }

  // uint32 s_thumb_LY = 6;
  if (this->s_thumb_ly() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s_thumb_ly());
  }

  // uint32 s_thumb_RX = 7;
  if (this->s_thumb_rx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s_thumb_rx());
  }

  // uint32 s_thumb_RY = 8;
  if (this->s_thumb_ry() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s_thumb_ry());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControllerFrame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fp_proto.ControllerFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const ControllerFrame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ControllerFrame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fp_proto.ControllerFrame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fp_proto.ControllerFrame)
    MergeFrom(*source);
  }
}

void ControllerFrame::MergeFrom(const ControllerFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fp_proto.ControllerFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sequence_num() != 0) {
    _internal_set_sequence_num(from._internal_sequence_num());
  }
  if (from.w_buttons() != 0) {
    _internal_set_w_buttons(from._internal_w_buttons());
  }
  if (from.b_left_trigger() != 0) {
    _internal_set_b_left_trigger(from._internal_b_left_trigger());
  }
  if (from.b_right_trigger() != 0) {
    _internal_set_b_right_trigger(from._internal_b_right_trigger());
  }
  if (from.s_thumb_lx() != 0) {
    _internal_set_s_thumb_lx(from._internal_s_thumb_lx());
  }
  if (from.s_thumb_ly() != 0) {
    _internal_set_s_thumb_ly(from._internal_s_thumb_ly());
  }
  if (from.s_thumb_rx() != 0) {
    _internal_set_s_thumb_rx(from._internal_s_thumb_rx());
  }
  if (from.s_thumb_ry() != 0) {
    _internal_set_s_thumb_ry(from._internal_s_thumb_ry());
  }
}

void ControllerFrame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fp_proto.ControllerFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControllerFrame::CopyFrom(const ControllerFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fp_proto.ControllerFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerFrame::IsInitialized() const {
  return true;
}

void ControllerFrame::InternalSwap(ControllerFrame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControllerFrame, s_thumb_ry_)
      + sizeof(ControllerFrame::s_thumb_ry_)
      - PROTOBUF_FIELD_OFFSET(ControllerFrame, sequence_num_)>(
          reinterpret_cast<char*>(&sequence_num_),
          reinterpret_cast<char*>(&other->sequence_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ControllerFrame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RequestToHost::InitAsDefaultInstance() {
}
class RequestToHost::_Internal {
 public:
};

RequestToHost::RequestToHost(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fp_proto.RequestToHost)
}
RequestToHost::RequestToHost(const RequestToHost& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:fp_proto.RequestToHost)
}

void RequestToHost::SharedCtor() {
  type_ = 0;
}

RequestToHost::~RequestToHost() {
  // @@protoc_insertion_point(destructor:fp_proto.RequestToHost)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RequestToHost::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RequestToHost::ArenaDtor(void* object) {
  RequestToHost* _this = reinterpret_cast< RequestToHost* >(object);
  (void)_this;
}
void RequestToHost::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestToHost::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestToHost& RequestToHost::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestToHost_client_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void RequestToHost::Clear() {
// @@protoc_insertion_point(message_clear_start:fp_proto.RequestToHost)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestToHost::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .fp_proto.RequestToHost.RequestType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::fp_proto::RequestToHost_RequestType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestToHost::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fp_proto.RequestToHost)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fp_proto.RequestToHost.RequestType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fp_proto.RequestToHost)
  return target;
}

size_t RequestToHost::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fp_proto.RequestToHost)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .fp_proto.RequestToHost.RequestType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestToHost::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fp_proto.RequestToHost)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestToHost* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestToHost>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fp_proto.RequestToHost)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fp_proto.RequestToHost)
    MergeFrom(*source);
  }
}

void RequestToHost::MergeFrom(const RequestToHost& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fp_proto.RequestToHost)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void RequestToHost::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fp_proto.RequestToHost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestToHost::CopyFrom(const RequestToHost& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fp_proto.RequestToHost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestToHost::IsInitialized() const {
  return true;
}

void RequestToHost::InternalSwap(RequestToHost* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestToHost::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientState::InitAsDefaultInstance() {
}
class ClientState::_Internal {
 public:
};

ClientState::ClientState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fp_proto.ClientState)
}
ClientState::ClientState(const ClientState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:fp_proto.ClientState)
}

void ClientState::SharedCtor() {
  state_ = 0;
}

ClientState::~ClientState() {
  // @@protoc_insertion_point(destructor:fp_proto.ClientState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClientState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ClientState::ArenaDtor(void* object) {
  ClientState* _this = reinterpret_cast< ClientState* >(object);
  (void)_this;
}
void ClientState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientState& ClientState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientState_client_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void ClientState::Clear() {
// @@protoc_insertion_point(message_clear_start:fp_proto.ClientState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .fp_proto.ClientState.State state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::fp_proto::ClientState_State>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fp_proto.ClientState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fp_proto.ClientState.State state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fp_proto.ClientState)
  return target;
}

size_t ClientState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fp_proto.ClientState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .fp_proto.ClientState.State state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fp_proto.ClientState)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fp_proto.ClientState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fp_proto.ClientState)
    MergeFrom(*source);
  }
}

void ClientState::MergeFrom(const ClientState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fp_proto.ClientState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void ClientState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fp_proto.ClientState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientState::CopyFrom(const ClientState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fp_proto.ClientState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientState::IsInitialized() const {
  return true;
}

void ClientState::InternalSwap(ClientState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientDataFrame::InitAsDefaultInstance() {
  ::fp_proto::_ClientDataFrame_default_instance_.keyboard_ = const_cast< ::fp_proto::KeyboardFrame*>(
      ::fp_proto::KeyboardFrame::internal_default_instance());
  ::fp_proto::_ClientDataFrame_default_instance_.mouse_ = const_cast< ::fp_proto::MouseFrame*>(
      ::fp_proto::MouseFrame::internal_default_instance());
  ::fp_proto::_ClientDataFrame_default_instance_.controller_ = const_cast< ::fp_proto::ControllerFrame*>(
      ::fp_proto::ControllerFrame::internal_default_instance());
  ::fp_proto::_ClientDataFrame_default_instance_.host_request_ = const_cast< ::fp_proto::RequestToHost*>(
      ::fp_proto::RequestToHost::internal_default_instance());
  ::fp_proto::_ClientDataFrame_default_instance_.client_state_ = const_cast< ::fp_proto::ClientState*>(
      ::fp_proto::ClientState::internal_default_instance());
}
class ClientDataFrame::_Internal {
 public:
  static const ::fp_proto::KeyboardFrame& keyboard(const ClientDataFrame* msg);
  static const ::fp_proto::MouseFrame& mouse(const ClientDataFrame* msg);
  static const ::fp_proto::ControllerFrame& controller(const ClientDataFrame* msg);
  static const ::fp_proto::RequestToHost& host_request(const ClientDataFrame* msg);
  static const ::fp_proto::ClientState& client_state(const ClientDataFrame* msg);
};

const ::fp_proto::KeyboardFrame&
ClientDataFrame::_Internal::keyboard(const ClientDataFrame* msg) {
  return *msg->DataFrame_.keyboard_;
}
const ::fp_proto::MouseFrame&
ClientDataFrame::_Internal::mouse(const ClientDataFrame* msg) {
  return *msg->DataFrame_.mouse_;
}
const ::fp_proto::ControllerFrame&
ClientDataFrame::_Internal::controller(const ClientDataFrame* msg) {
  return *msg->DataFrame_.controller_;
}
const ::fp_proto::RequestToHost&
ClientDataFrame::_Internal::host_request(const ClientDataFrame* msg) {
  return *msg->DataFrame_.host_request_;
}
const ::fp_proto::ClientState&
ClientDataFrame::_Internal::client_state(const ClientDataFrame* msg) {
  return *msg->DataFrame_.client_state_;
}
void ClientDataFrame::set_allocated_keyboard(::fp_proto::KeyboardFrame* keyboard) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_DataFrame();
  if (keyboard) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(keyboard);
    if (message_arena != submessage_arena) {
      keyboard = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, keyboard, submessage_arena);
    }
    set_has_keyboard();
    DataFrame_.keyboard_ = keyboard;
  }
  // @@protoc_insertion_point(field_set_allocated:fp_proto.ClientDataFrame.keyboard)
}
void ClientDataFrame::set_allocated_mouse(::fp_proto::MouseFrame* mouse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_DataFrame();
  if (mouse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mouse);
    if (message_arena != submessage_arena) {
      mouse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mouse, submessage_arena);
    }
    set_has_mouse();
    DataFrame_.mouse_ = mouse;
  }
  // @@protoc_insertion_point(field_set_allocated:fp_proto.ClientDataFrame.mouse)
}
void ClientDataFrame::set_allocated_controller(::fp_proto::ControllerFrame* controller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_DataFrame();
  if (controller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(controller);
    if (message_arena != submessage_arena) {
      controller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controller, submessage_arena);
    }
    set_has_controller();
    DataFrame_.controller_ = controller;
  }
  // @@protoc_insertion_point(field_set_allocated:fp_proto.ClientDataFrame.controller)
}
void ClientDataFrame::set_allocated_host_request(::fp_proto::RequestToHost* host_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_DataFrame();
  if (host_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(host_request);
    if (message_arena != submessage_arena) {
      host_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, host_request, submessage_arena);
    }
    set_has_host_request();
    DataFrame_.host_request_ = host_request;
  }
  // @@protoc_insertion_point(field_set_allocated:fp_proto.ClientDataFrame.host_request)
}
void ClientDataFrame::set_allocated_client_state(::fp_proto::ClientState* client_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_DataFrame();
  if (client_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(client_state);
    if (message_arena != submessage_arena) {
      client_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_state, submessage_arena);
    }
    set_has_client_state();
    DataFrame_.client_state_ = client_state;
  }
  // @@protoc_insertion_point(field_set_allocated:fp_proto.ClientDataFrame.client_state)
}
ClientDataFrame::ClientDataFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fp_proto.ClientDataFrame)
}
ClientDataFrame::ClientDataFrame(const ClientDataFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  frame_id_ = from.frame_id_;
  clear_has_DataFrame();
  switch (from.DataFrame_case()) {
    case kKeyboard: {
      _internal_mutable_keyboard()->::fp_proto::KeyboardFrame::MergeFrom(from._internal_keyboard());
      break;
    }
    case kMouse: {
      _internal_mutable_mouse()->::fp_proto::MouseFrame::MergeFrom(from._internal_mouse());
      break;
    }
    case kController: {
      _internal_mutable_controller()->::fp_proto::ControllerFrame::MergeFrom(from._internal_controller());
      break;
    }
    case kHostRequest: {
      _internal_mutable_host_request()->::fp_proto::RequestToHost::MergeFrom(from._internal_host_request());
      break;
    }
    case kClientState: {
      _internal_mutable_client_state()->::fp_proto::ClientState::MergeFrom(from._internal_client_state());
      break;
    }
    case DATAFRAME_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:fp_proto.ClientDataFrame)
}

void ClientDataFrame::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientDataFrame_client_5fmessages_2eproto.base);
  frame_id_ = 0u;
  clear_has_DataFrame();
}

ClientDataFrame::~ClientDataFrame() {
  // @@protoc_insertion_point(destructor:fp_proto.ClientDataFrame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClientDataFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_DataFrame()) {
    clear_DataFrame();
  }
}

void ClientDataFrame::ArenaDtor(void* object) {
  ClientDataFrame* _this = reinterpret_cast< ClientDataFrame* >(object);
  (void)_this;
}
void ClientDataFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientDataFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientDataFrame& ClientDataFrame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientDataFrame_client_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void ClientDataFrame::clear_DataFrame() {
// @@protoc_insertion_point(one_of_clear_start:fp_proto.ClientDataFrame)
  switch (DataFrame_case()) {
    case kKeyboard: {
      if (GetArena() == nullptr) {
        delete DataFrame_.keyboard_;
      }
      break;
    }
    case kMouse: {
      if (GetArena() == nullptr) {
        delete DataFrame_.mouse_;
      }
      break;
    }
    case kController: {
      if (GetArena() == nullptr) {
        delete DataFrame_.controller_;
      }
      break;
    }
    case kHostRequest: {
      if (GetArena() == nullptr) {
        delete DataFrame_.host_request_;
      }
      break;
    }
    case kClientState: {
      if (GetArena() == nullptr) {
        delete DataFrame_.client_state_;
      }
      break;
    }
    case DATAFRAME_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATAFRAME_NOT_SET;
}


void ClientDataFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:fp_proto.ClientDataFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frame_id_ = 0u;
  clear_DataFrame();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientDataFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 frame_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fp_proto.KeyboardFrame keyboard = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_keyboard(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fp_proto.MouseFrame mouse = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_mouse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fp_proto.ControllerFrame controller = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_controller(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fp_proto.RequestToHost host_request = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_host_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fp_proto.ClientState client_state = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientDataFrame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fp_proto.ClientDataFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 frame_id = 1;
  if (this->frame_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_frame_id(), target);
  }

  // .fp_proto.KeyboardFrame keyboard = 2;
  if (_internal_has_keyboard()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::keyboard(this), target, stream);
  }

  // .fp_proto.MouseFrame mouse = 3;
  if (_internal_has_mouse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::mouse(this), target, stream);
  }

  // .fp_proto.ControllerFrame controller = 4;
  if (_internal_has_controller()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::controller(this), target, stream);
  }

  // .fp_proto.RequestToHost host_request = 5;
  if (_internal_has_host_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::host_request(this), target, stream);
  }

  // .fp_proto.ClientState client_state = 6;
  if (_internal_has_client_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::client_state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fp_proto.ClientDataFrame)
  return target;
}

size_t ClientDataFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fp_proto.ClientDataFrame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 frame_id = 1;
  if (this->frame_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_frame_id());
  }

  switch (DataFrame_case()) {
    // .fp_proto.KeyboardFrame keyboard = 2;
    case kKeyboard: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *DataFrame_.keyboard_);
      break;
    }
    // .fp_proto.MouseFrame mouse = 3;
    case kMouse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *DataFrame_.mouse_);
      break;
    }
    // .fp_proto.ControllerFrame controller = 4;
    case kController: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *DataFrame_.controller_);
      break;
    }
    // .fp_proto.RequestToHost host_request = 5;
    case kHostRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *DataFrame_.host_request_);
      break;
    }
    // .fp_proto.ClientState client_state = 6;
    case kClientState: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *DataFrame_.client_state_);
      break;
    }
    case DATAFRAME_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientDataFrame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fp_proto.ClientDataFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientDataFrame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientDataFrame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fp_proto.ClientDataFrame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fp_proto.ClientDataFrame)
    MergeFrom(*source);
  }
}

void ClientDataFrame::MergeFrom(const ClientDataFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fp_proto.ClientDataFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.frame_id() != 0) {
    _internal_set_frame_id(from._internal_frame_id());
  }
  switch (from.DataFrame_case()) {
    case kKeyboard: {
      _internal_mutable_keyboard()->::fp_proto::KeyboardFrame::MergeFrom(from._internal_keyboard());
      break;
    }
    case kMouse: {
      _internal_mutable_mouse()->::fp_proto::MouseFrame::MergeFrom(from._internal_mouse());
      break;
    }
    case kController: {
      _internal_mutable_controller()->::fp_proto::ControllerFrame::MergeFrom(from._internal_controller());
      break;
    }
    case kHostRequest: {
      _internal_mutable_host_request()->::fp_proto::RequestToHost::MergeFrom(from._internal_host_request());
      break;
    }
    case kClientState: {
      _internal_mutable_client_state()->::fp_proto::ClientState::MergeFrom(from._internal_client_state());
      break;
    }
    case DATAFRAME_NOT_SET: {
      break;
    }
  }
}

void ClientDataFrame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fp_proto.ClientDataFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientDataFrame::CopyFrom(const ClientDataFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fp_proto.ClientDataFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientDataFrame::IsInitialized() const {
  return true;
}

void ClientDataFrame::InternalSwap(ClientDataFrame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(frame_id_, other->frame_id_);
  swap(DataFrame_, other->DataFrame_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientDataFrame::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace fp_proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::fp_proto::KeyboardFrame* Arena::CreateMaybeMessage< ::fp_proto::KeyboardFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fp_proto::KeyboardFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::fp_proto::MouseFrame* Arena::CreateMaybeMessage< ::fp_proto::MouseFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fp_proto::MouseFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::fp_proto::ControllerFrame* Arena::CreateMaybeMessage< ::fp_proto::ControllerFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fp_proto::ControllerFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::fp_proto::RequestToHost* Arena::CreateMaybeMessage< ::fp_proto::RequestToHost >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fp_proto::RequestToHost >(arena);
}
template<> PROTOBUF_NOINLINE ::fp_proto::ClientState* Arena::CreateMaybeMessage< ::fp_proto::ClientState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fp_proto::ClientState >(arena);
}
template<> PROTOBUF_NOINLINE ::fp_proto::ClientDataFrame* Arena::CreateMaybeMessage< ::fp_proto::ClientDataFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fp_proto::ClientDataFrame >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
