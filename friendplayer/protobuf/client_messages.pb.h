// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_messages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_client_5fmessages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_client_5fmessages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_client_5fmessages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_client_5fmessages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_client_5fmessages_2eproto;
namespace fp_proto {
class ClientDataFrame;
class ClientDataFrameDefaultTypeInternal;
extern ClientDataFrameDefaultTypeInternal _ClientDataFrame_default_instance_;
class ClientState;
class ClientStateDefaultTypeInternal;
extern ClientStateDefaultTypeInternal _ClientState_default_instance_;
class ControllerFrame;
class ControllerFrameDefaultTypeInternal;
extern ControllerFrameDefaultTypeInternal _ControllerFrame_default_instance_;
class KeyboardFrame;
class KeyboardFrameDefaultTypeInternal;
extern KeyboardFrameDefaultTypeInternal _KeyboardFrame_default_instance_;
class MouseFrame;
class MouseFrameDefaultTypeInternal;
extern MouseFrameDefaultTypeInternal _MouseFrame_default_instance_;
class RequestToHost;
class RequestToHostDefaultTypeInternal;
extern RequestToHostDefaultTypeInternal _RequestToHost_default_instance_;
}  // namespace fp_proto
PROTOBUF_NAMESPACE_OPEN
template<> ::fp_proto::ClientDataFrame* Arena::CreateMaybeMessage<::fp_proto::ClientDataFrame>(Arena*);
template<> ::fp_proto::ClientState* Arena::CreateMaybeMessage<::fp_proto::ClientState>(Arena*);
template<> ::fp_proto::ControllerFrame* Arena::CreateMaybeMessage<::fp_proto::ControllerFrame>(Arena*);
template<> ::fp_proto::KeyboardFrame* Arena::CreateMaybeMessage<::fp_proto::KeyboardFrame>(Arena*);
template<> ::fp_proto::MouseFrame* Arena::CreateMaybeMessage<::fp_proto::MouseFrame>(Arena*);
template<> ::fp_proto::RequestToHost* Arena::CreateMaybeMessage<::fp_proto::RequestToHost>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace fp_proto {

enum MouseFrame_MouseButtons : int {
  MouseFrame_MouseButtons_MOUSE_L = 0,
  MouseFrame_MouseButtons_MOUSE_MIDDLE = 1,
  MouseFrame_MouseButtons_MOUSE_R = 2,
  MouseFrame_MouseButtons_MOUSE_X1 = 3,
  MouseFrame_MouseButtons_MOUSE_X2 = 4,
  MouseFrame_MouseButtons_MouseFrame_MouseButtons_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MouseFrame_MouseButtons_MouseFrame_MouseButtons_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MouseFrame_MouseButtons_IsValid(int value);
constexpr MouseFrame_MouseButtons MouseFrame_MouseButtons_MouseButtons_MIN = MouseFrame_MouseButtons_MOUSE_L;
constexpr MouseFrame_MouseButtons MouseFrame_MouseButtons_MouseButtons_MAX = MouseFrame_MouseButtons_MOUSE_X2;
constexpr int MouseFrame_MouseButtons_MouseButtons_ARRAYSIZE = MouseFrame_MouseButtons_MouseButtons_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MouseFrame_MouseButtons_descriptor();
template<typename T>
inline const std::string& MouseFrame_MouseButtons_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MouseFrame_MouseButtons>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MouseFrame_MouseButtons_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MouseFrame_MouseButtons_descriptor(), enum_t_value);
}
inline bool MouseFrame_MouseButtons_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MouseFrame_MouseButtons* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MouseFrame_MouseButtons>(
    MouseFrame_MouseButtons_descriptor(), name, value);
}
enum RequestToHost_RequestType : int {
  RequestToHost_RequestType_SEND_IDR = 0,
  RequestToHost_RequestType_MUTE_AUDIO = 1,
  RequestToHost_RequestType_PLAY_AUDIO = 2,
  RequestToHost_RequestType_RequestToHost_RequestType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RequestToHost_RequestType_RequestToHost_RequestType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RequestToHost_RequestType_IsValid(int value);
constexpr RequestToHost_RequestType RequestToHost_RequestType_RequestType_MIN = RequestToHost_RequestType_SEND_IDR;
constexpr RequestToHost_RequestType RequestToHost_RequestType_RequestType_MAX = RequestToHost_RequestType_PLAY_AUDIO;
constexpr int RequestToHost_RequestType_RequestType_ARRAYSIZE = RequestToHost_RequestType_RequestType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RequestToHost_RequestType_descriptor();
template<typename T>
inline const std::string& RequestToHost_RequestType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RequestToHost_RequestType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RequestToHost_RequestType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RequestToHost_RequestType_descriptor(), enum_t_value);
}
inline bool RequestToHost_RequestType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RequestToHost_RequestType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RequestToHost_RequestType>(
    RequestToHost_RequestType_descriptor(), name, value);
}
enum ClientState_State : int {
  ClientState_State_READY_FOR_PPS_SPS_IDR = 0,
  ClientState_State_READY_FOR_VIDEO = 1,
  ClientState_State_HEARTBEAT = 2,
  ClientState_State_DISCONNECTING = 3,
  ClientState_State_ClientState_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ClientState_State_ClientState_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ClientState_State_IsValid(int value);
constexpr ClientState_State ClientState_State_State_MIN = ClientState_State_READY_FOR_PPS_SPS_IDR;
constexpr ClientState_State ClientState_State_State_MAX = ClientState_State_DISCONNECTING;
constexpr int ClientState_State_State_ARRAYSIZE = ClientState_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientState_State_descriptor();
template<typename T>
inline const std::string& ClientState_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientState_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientState_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ClientState_State_descriptor(), enum_t_value);
}
inline bool ClientState_State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientState_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ClientState_State>(
    ClientState_State_descriptor(), name, value);
}
// ===================================================================

class KeyboardFrame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fp_proto.KeyboardFrame) */ {
 public:
  inline KeyboardFrame() : KeyboardFrame(nullptr) {}
  virtual ~KeyboardFrame();

  KeyboardFrame(const KeyboardFrame& from);
  KeyboardFrame(KeyboardFrame&& from) noexcept
    : KeyboardFrame() {
    *this = ::std::move(from);
  }

  inline KeyboardFrame& operator=(const KeyboardFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyboardFrame& operator=(KeyboardFrame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyboardFrame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyboardFrame* internal_default_instance() {
    return reinterpret_cast<const KeyboardFrame*>(
               &_KeyboardFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(KeyboardFrame& a, KeyboardFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyboardFrame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyboardFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyboardFrame* New() const final {
    return CreateMaybeMessage<KeyboardFrame>(nullptr);
  }

  KeyboardFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyboardFrame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyboardFrame& from);
  void MergeFrom(const KeyboardFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyboardFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fp_proto.KeyboardFrame";
  }
  protected:
  explicit KeyboardFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fmessages_2eproto);
    return ::descriptor_table_client_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:fp_proto.KeyboardFrame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class MouseFrame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fp_proto.MouseFrame) */ {
 public:
  inline MouseFrame() : MouseFrame(nullptr) {}
  virtual ~MouseFrame();

  MouseFrame(const MouseFrame& from);
  MouseFrame(MouseFrame&& from) noexcept
    : MouseFrame() {
    *this = ::std::move(from);
  }

  inline MouseFrame& operator=(const MouseFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline MouseFrame& operator=(MouseFrame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MouseFrame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MouseFrame* internal_default_instance() {
    return reinterpret_cast<const MouseFrame*>(
               &_MouseFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MouseFrame& a, MouseFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(MouseFrame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MouseFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MouseFrame* New() const final {
    return CreateMaybeMessage<MouseFrame>(nullptr);
  }

  MouseFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MouseFrame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MouseFrame& from);
  void MergeFrom(const MouseFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MouseFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fp_proto.MouseFrame";
  }
  protected:
  explicit MouseFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fmessages_2eproto);
    return ::descriptor_table_client_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef MouseFrame_MouseButtons MouseButtons;
  static constexpr MouseButtons MOUSE_L =
    MouseFrame_MouseButtons_MOUSE_L;
  static constexpr MouseButtons MOUSE_MIDDLE =
    MouseFrame_MouseButtons_MOUSE_MIDDLE;
  static constexpr MouseButtons MOUSE_R =
    MouseFrame_MouseButtons_MOUSE_R;
  static constexpr MouseButtons MOUSE_X1 =
    MouseFrame_MouseButtons_MOUSE_X1;
  static constexpr MouseButtons MOUSE_X2 =
    MouseFrame_MouseButtons_MOUSE_X2;
  static inline bool MouseButtons_IsValid(int value) {
    return MouseFrame_MouseButtons_IsValid(value);
  }
  static constexpr MouseButtons MouseButtons_MIN =
    MouseFrame_MouseButtons_MouseButtons_MIN;
  static constexpr MouseButtons MouseButtons_MAX =
    MouseFrame_MouseButtons_MouseButtons_MAX;
  static constexpr int MouseButtons_ARRAYSIZE =
    MouseFrame_MouseButtons_MouseButtons_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MouseButtons_descriptor() {
    return MouseFrame_MouseButtons_descriptor();
  }
  template<typename T>
  static inline const std::string& MouseButtons_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MouseButtons>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MouseButtons_Name.");
    return MouseFrame_MouseButtons_Name(enum_t_value);
  }
  static inline bool MouseButtons_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MouseButtons* value) {
    return MouseFrame_MouseButtons_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kButtonFieldNumber = 1,
    kPressedFieldNumber = 2,
  };
  // .fp_proto.MouseFrame.MouseButtons button = 1;
  void clear_button();
  ::fp_proto::MouseFrame_MouseButtons button() const;
  void set_button(::fp_proto::MouseFrame_MouseButtons value);
  private:
  ::fp_proto::MouseFrame_MouseButtons _internal_button() const;
  void _internal_set_button(::fp_proto::MouseFrame_MouseButtons value);
  public:

  // bool pressed = 2;
  void clear_pressed();
  bool pressed() const;
  void set_pressed(bool value);
  private:
  bool _internal_pressed() const;
  void _internal_set_pressed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:fp_proto.MouseFrame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int button_;
  bool pressed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class ControllerFrame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fp_proto.ControllerFrame) */ {
 public:
  inline ControllerFrame() : ControllerFrame(nullptr) {}
  virtual ~ControllerFrame();

  ControllerFrame(const ControllerFrame& from);
  ControllerFrame(ControllerFrame&& from) noexcept
    : ControllerFrame() {
    *this = ::std::move(from);
  }

  inline ControllerFrame& operator=(const ControllerFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControllerFrame& operator=(ControllerFrame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ControllerFrame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControllerFrame* internal_default_instance() {
    return reinterpret_cast<const ControllerFrame*>(
               &_ControllerFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ControllerFrame& a, ControllerFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(ControllerFrame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControllerFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ControllerFrame* New() const final {
    return CreateMaybeMessage<ControllerFrame>(nullptr);
  }

  ControllerFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ControllerFrame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ControllerFrame& from);
  void MergeFrom(const ControllerFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControllerFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fp_proto.ControllerFrame";
  }
  protected:
  explicit ControllerFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fmessages_2eproto);
    return ::descriptor_table_client_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSequenceNumFieldNumber = 1,
    kWButtonsFieldNumber = 2,
    kBLeftTriggerFieldNumber = 3,
    kBRightTriggerFieldNumber = 4,
    kSThumbLXFieldNumber = 5,
    kSThumbLYFieldNumber = 6,
    kSThumbRXFieldNumber = 7,
    kSThumbRYFieldNumber = 8,
  };
  // uint32 sequence_num = 1;
  void clear_sequence_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence_num() const;
  void set_sequence_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sequence_num() const;
  void _internal_set_sequence_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 w_buttons = 2;
  void clear_w_buttons();
  ::PROTOBUF_NAMESPACE_ID::uint32 w_buttons() const;
  void set_w_buttons(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_w_buttons() const;
  void _internal_set_w_buttons(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 b_left_trigger = 3;
  void clear_b_left_trigger();
  ::PROTOBUF_NAMESPACE_ID::uint32 b_left_trigger() const;
  void set_b_left_trigger(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_b_left_trigger() const;
  void _internal_set_b_left_trigger(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 b_right_trigger = 4;
  void clear_b_right_trigger();
  ::PROTOBUF_NAMESPACE_ID::uint32 b_right_trigger() const;
  void set_b_right_trigger(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_b_right_trigger() const;
  void _internal_set_b_right_trigger(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 s_thumb_LX = 5;
  void clear_s_thumb_lx();
  ::PROTOBUF_NAMESPACE_ID::uint32 s_thumb_lx() const;
  void set_s_thumb_lx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_s_thumb_lx() const;
  void _internal_set_s_thumb_lx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 s_thumb_LY = 6;
  void clear_s_thumb_ly();
  ::PROTOBUF_NAMESPACE_ID::uint32 s_thumb_ly() const;
  void set_s_thumb_ly(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_s_thumb_ly() const;
  void _internal_set_s_thumb_ly(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 s_thumb_RX = 7;
  void clear_s_thumb_rx();
  ::PROTOBUF_NAMESPACE_ID::uint32 s_thumb_rx() const;
  void set_s_thumb_rx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_s_thumb_rx() const;
  void _internal_set_s_thumb_rx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 s_thumb_RY = 8;
  void clear_s_thumb_ry();
  ::PROTOBUF_NAMESPACE_ID::uint32 s_thumb_ry() const;
  void set_s_thumb_ry(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_s_thumb_ry() const;
  void _internal_set_s_thumb_ry(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fp_proto.ControllerFrame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence_num_;
  ::PROTOBUF_NAMESPACE_ID::uint32 w_buttons_;
  ::PROTOBUF_NAMESPACE_ID::uint32 b_left_trigger_;
  ::PROTOBUF_NAMESPACE_ID::uint32 b_right_trigger_;
  ::PROTOBUF_NAMESPACE_ID::uint32 s_thumb_lx_;
  ::PROTOBUF_NAMESPACE_ID::uint32 s_thumb_ly_;
  ::PROTOBUF_NAMESPACE_ID::uint32 s_thumb_rx_;
  ::PROTOBUF_NAMESPACE_ID::uint32 s_thumb_ry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class RequestToHost PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fp_proto.RequestToHost) */ {
 public:
  inline RequestToHost() : RequestToHost(nullptr) {}
  virtual ~RequestToHost();

  RequestToHost(const RequestToHost& from);
  RequestToHost(RequestToHost&& from) noexcept
    : RequestToHost() {
    *this = ::std::move(from);
  }

  inline RequestToHost& operator=(const RequestToHost& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestToHost& operator=(RequestToHost&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestToHost& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestToHost* internal_default_instance() {
    return reinterpret_cast<const RequestToHost*>(
               &_RequestToHost_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RequestToHost& a, RequestToHost& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestToHost* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestToHost* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestToHost* New() const final {
    return CreateMaybeMessage<RequestToHost>(nullptr);
  }

  RequestToHost* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestToHost>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestToHost& from);
  void MergeFrom(const RequestToHost& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestToHost* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fp_proto.RequestToHost";
  }
  protected:
  explicit RequestToHost(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fmessages_2eproto);
    return ::descriptor_table_client_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef RequestToHost_RequestType RequestType;
  static constexpr RequestType SEND_IDR =
    RequestToHost_RequestType_SEND_IDR;
  static constexpr RequestType MUTE_AUDIO =
    RequestToHost_RequestType_MUTE_AUDIO;
  static constexpr RequestType PLAY_AUDIO =
    RequestToHost_RequestType_PLAY_AUDIO;
  static inline bool RequestType_IsValid(int value) {
    return RequestToHost_RequestType_IsValid(value);
  }
  static constexpr RequestType RequestType_MIN =
    RequestToHost_RequestType_RequestType_MIN;
  static constexpr RequestType RequestType_MAX =
    RequestToHost_RequestType_RequestType_MAX;
  static constexpr int RequestType_ARRAYSIZE =
    RequestToHost_RequestType_RequestType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RequestType_descriptor() {
    return RequestToHost_RequestType_descriptor();
  }
  template<typename T>
  static inline const std::string& RequestType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RequestType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RequestType_Name.");
    return RequestToHost_RequestType_Name(enum_t_value);
  }
  static inline bool RequestType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RequestType* value) {
    return RequestToHost_RequestType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // .fp_proto.RequestToHost.RequestType type = 1;
  void clear_type();
  ::fp_proto::RequestToHost_RequestType type() const;
  void set_type(::fp_proto::RequestToHost_RequestType value);
  private:
  ::fp_proto::RequestToHost_RequestType _internal_type() const;
  void _internal_set_type(::fp_proto::RequestToHost_RequestType value);
  public:

  // @@protoc_insertion_point(class_scope:fp_proto.RequestToHost)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class ClientState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fp_proto.ClientState) */ {
 public:
  inline ClientState() : ClientState(nullptr) {}
  virtual ~ClientState();

  ClientState(const ClientState& from);
  ClientState(ClientState&& from) noexcept
    : ClientState() {
    *this = ::std::move(from);
  }

  inline ClientState& operator=(const ClientState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientState& operator=(ClientState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientState* internal_default_instance() {
    return reinterpret_cast<const ClientState*>(
               &_ClientState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ClientState& a, ClientState& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientState* New() const final {
    return CreateMaybeMessage<ClientState>(nullptr);
  }

  ClientState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientState& from);
  void MergeFrom(const ClientState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fp_proto.ClientState";
  }
  protected:
  explicit ClientState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fmessages_2eproto);
    return ::descriptor_table_client_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ClientState_State State;
  static constexpr State READY_FOR_PPS_SPS_IDR =
    ClientState_State_READY_FOR_PPS_SPS_IDR;
  static constexpr State READY_FOR_VIDEO =
    ClientState_State_READY_FOR_VIDEO;
  static constexpr State HEARTBEAT =
    ClientState_State_HEARTBEAT;
  static constexpr State DISCONNECTING =
    ClientState_State_DISCONNECTING;
  static inline bool State_IsValid(int value) {
    return ClientState_State_IsValid(value);
  }
  static constexpr State State_MIN =
    ClientState_State_State_MIN;
  static constexpr State State_MAX =
    ClientState_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    ClientState_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return ClientState_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return ClientState_State_Name(enum_t_value);
  }
  static inline bool State_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      State* value) {
    return ClientState_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // .fp_proto.ClientState.State state = 1;
  void clear_state();
  ::fp_proto::ClientState_State state() const;
  void set_state(::fp_proto::ClientState_State value);
  private:
  ::fp_proto::ClientState_State _internal_state() const;
  void _internal_set_state(::fp_proto::ClientState_State value);
  public:

  // @@protoc_insertion_point(class_scope:fp_proto.ClientState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class ClientDataFrame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fp_proto.ClientDataFrame) */ {
 public:
  inline ClientDataFrame() : ClientDataFrame(nullptr) {}
  virtual ~ClientDataFrame();

  ClientDataFrame(const ClientDataFrame& from);
  ClientDataFrame(ClientDataFrame&& from) noexcept
    : ClientDataFrame() {
    *this = ::std::move(from);
  }

  inline ClientDataFrame& operator=(const ClientDataFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientDataFrame& operator=(ClientDataFrame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientDataFrame& default_instance();

  enum DataFrameCase {
    kKeyboard = 2,
    kMouse = 3,
    kController = 4,
    kHostRequest = 5,
    kClientState = 6,
    DATAFRAME_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientDataFrame* internal_default_instance() {
    return reinterpret_cast<const ClientDataFrame*>(
               &_ClientDataFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ClientDataFrame& a, ClientDataFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientDataFrame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientDataFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientDataFrame* New() const final {
    return CreateMaybeMessage<ClientDataFrame>(nullptr);
  }

  ClientDataFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientDataFrame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientDataFrame& from);
  void MergeFrom(const ClientDataFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientDataFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fp_proto.ClientDataFrame";
  }
  protected:
  explicit ClientDataFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fmessages_2eproto);
    return ::descriptor_table_client_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrameIdFieldNumber = 1,
    kKeyboardFieldNumber = 2,
    kMouseFieldNumber = 3,
    kControllerFieldNumber = 4,
    kHostRequestFieldNumber = 5,
    kClientStateFieldNumber = 6,
  };
  // uint32 frame_id = 1;
  void clear_frame_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 frame_id() const;
  void set_frame_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_frame_id() const;
  void _internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .fp_proto.KeyboardFrame keyboard = 2;
  bool has_keyboard() const;
  private:
  bool _internal_has_keyboard() const;
  public:
  void clear_keyboard();
  const ::fp_proto::KeyboardFrame& keyboard() const;
  ::fp_proto::KeyboardFrame* release_keyboard();
  ::fp_proto::KeyboardFrame* mutable_keyboard();
  void set_allocated_keyboard(::fp_proto::KeyboardFrame* keyboard);
  private:
  const ::fp_proto::KeyboardFrame& _internal_keyboard() const;
  ::fp_proto::KeyboardFrame* _internal_mutable_keyboard();
  public:
  void unsafe_arena_set_allocated_keyboard(
      ::fp_proto::KeyboardFrame* keyboard);
  ::fp_proto::KeyboardFrame* unsafe_arena_release_keyboard();

  // .fp_proto.MouseFrame mouse = 3;
  bool has_mouse() const;
  private:
  bool _internal_has_mouse() const;
  public:
  void clear_mouse();
  const ::fp_proto::MouseFrame& mouse() const;
  ::fp_proto::MouseFrame* release_mouse();
  ::fp_proto::MouseFrame* mutable_mouse();
  void set_allocated_mouse(::fp_proto::MouseFrame* mouse);
  private:
  const ::fp_proto::MouseFrame& _internal_mouse() const;
  ::fp_proto::MouseFrame* _internal_mutable_mouse();
  public:
  void unsafe_arena_set_allocated_mouse(
      ::fp_proto::MouseFrame* mouse);
  ::fp_proto::MouseFrame* unsafe_arena_release_mouse();

  // .fp_proto.ControllerFrame controller = 4;
  bool has_controller() const;
  private:
  bool _internal_has_controller() const;
  public:
  void clear_controller();
  const ::fp_proto::ControllerFrame& controller() const;
  ::fp_proto::ControllerFrame* release_controller();
  ::fp_proto::ControllerFrame* mutable_controller();
  void set_allocated_controller(::fp_proto::ControllerFrame* controller);
  private:
  const ::fp_proto::ControllerFrame& _internal_controller() const;
  ::fp_proto::ControllerFrame* _internal_mutable_controller();
  public:
  void unsafe_arena_set_allocated_controller(
      ::fp_proto::ControllerFrame* controller);
  ::fp_proto::ControllerFrame* unsafe_arena_release_controller();

  // .fp_proto.RequestToHost host_request = 5;
  bool has_host_request() const;
  private:
  bool _internal_has_host_request() const;
  public:
  void clear_host_request();
  const ::fp_proto::RequestToHost& host_request() const;
  ::fp_proto::RequestToHost* release_host_request();
  ::fp_proto::RequestToHost* mutable_host_request();
  void set_allocated_host_request(::fp_proto::RequestToHost* host_request);
  private:
  const ::fp_proto::RequestToHost& _internal_host_request() const;
  ::fp_proto::RequestToHost* _internal_mutable_host_request();
  public:
  void unsafe_arena_set_allocated_host_request(
      ::fp_proto::RequestToHost* host_request);
  ::fp_proto::RequestToHost* unsafe_arena_release_host_request();

  // .fp_proto.ClientState client_state = 6;
  bool has_client_state() const;
  private:
  bool _internal_has_client_state() const;
  public:
  void clear_client_state();
  const ::fp_proto::ClientState& client_state() const;
  ::fp_proto::ClientState* release_client_state();
  ::fp_proto::ClientState* mutable_client_state();
  void set_allocated_client_state(::fp_proto::ClientState* client_state);
  private:
  const ::fp_proto::ClientState& _internal_client_state() const;
  ::fp_proto::ClientState* _internal_mutable_client_state();
  public:
  void unsafe_arena_set_allocated_client_state(
      ::fp_proto::ClientState* client_state);
  ::fp_proto::ClientState* unsafe_arena_release_client_state();

  void clear_DataFrame();
  DataFrameCase DataFrame_case() const;
  // @@protoc_insertion_point(class_scope:fp_proto.ClientDataFrame)
 private:
  class _Internal;
  void set_has_keyboard();
  void set_has_mouse();
  void set_has_controller();
  void set_has_host_request();
  void set_has_client_state();

  inline bool has_DataFrame() const;
  inline void clear_has_DataFrame();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 frame_id_;
  union DataFrameUnion {
    DataFrameUnion() {}
    ::fp_proto::KeyboardFrame* keyboard_;
    ::fp_proto::MouseFrame* mouse_;
    ::fp_proto::ControllerFrame* controller_;
    ::fp_proto::RequestToHost* host_request_;
    ::fp_proto::ClientState* client_state_;
  } DataFrame_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_client_5fmessages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KeyboardFrame

// -------------------------------------------------------------------

// MouseFrame

// .fp_proto.MouseFrame.MouseButtons button = 1;
inline void MouseFrame::clear_button() {
  button_ = 0;
}
inline ::fp_proto::MouseFrame_MouseButtons MouseFrame::_internal_button() const {
  return static_cast< ::fp_proto::MouseFrame_MouseButtons >(button_);
}
inline ::fp_proto::MouseFrame_MouseButtons MouseFrame::button() const {
  // @@protoc_insertion_point(field_get:fp_proto.MouseFrame.button)
  return _internal_button();
}
inline void MouseFrame::_internal_set_button(::fp_proto::MouseFrame_MouseButtons value) {
  
  button_ = value;
}
inline void MouseFrame::set_button(::fp_proto::MouseFrame_MouseButtons value) {
  _internal_set_button(value);
  // @@protoc_insertion_point(field_set:fp_proto.MouseFrame.button)
}

// bool pressed = 2;
inline void MouseFrame::clear_pressed() {
  pressed_ = false;
}
inline bool MouseFrame::_internal_pressed() const {
  return pressed_;
}
inline bool MouseFrame::pressed() const {
  // @@protoc_insertion_point(field_get:fp_proto.MouseFrame.pressed)
  return _internal_pressed();
}
inline void MouseFrame::_internal_set_pressed(bool value) {
  
  pressed_ = value;
}
inline void MouseFrame::set_pressed(bool value) {
  _internal_set_pressed(value);
  // @@protoc_insertion_point(field_set:fp_proto.MouseFrame.pressed)
}

// -------------------------------------------------------------------

// ControllerFrame

// uint32 sequence_num = 1;
inline void ControllerFrame::clear_sequence_num() {
  sequence_num_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ControllerFrame::_internal_sequence_num() const {
  return sequence_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ControllerFrame::sequence_num() const {
  // @@protoc_insertion_point(field_get:fp_proto.ControllerFrame.sequence_num)
  return _internal_sequence_num();
}
inline void ControllerFrame::_internal_set_sequence_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sequence_num_ = value;
}
inline void ControllerFrame::set_sequence_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sequence_num(value);
  // @@protoc_insertion_point(field_set:fp_proto.ControllerFrame.sequence_num)
}

// uint32 w_buttons = 2;
inline void ControllerFrame::clear_w_buttons() {
  w_buttons_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ControllerFrame::_internal_w_buttons() const {
  return w_buttons_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ControllerFrame::w_buttons() const {
  // @@protoc_insertion_point(field_get:fp_proto.ControllerFrame.w_buttons)
  return _internal_w_buttons();
}
inline void ControllerFrame::_internal_set_w_buttons(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  w_buttons_ = value;
}
inline void ControllerFrame::set_w_buttons(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_w_buttons(value);
  // @@protoc_insertion_point(field_set:fp_proto.ControllerFrame.w_buttons)
}

// uint32 b_left_trigger = 3;
inline void ControllerFrame::clear_b_left_trigger() {
  b_left_trigger_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ControllerFrame::_internal_b_left_trigger() const {
  return b_left_trigger_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ControllerFrame::b_left_trigger() const {
  // @@protoc_insertion_point(field_get:fp_proto.ControllerFrame.b_left_trigger)
  return _internal_b_left_trigger();
}
inline void ControllerFrame::_internal_set_b_left_trigger(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  b_left_trigger_ = value;
}
inline void ControllerFrame::set_b_left_trigger(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_b_left_trigger(value);
  // @@protoc_insertion_point(field_set:fp_proto.ControllerFrame.b_left_trigger)
}

// uint32 b_right_trigger = 4;
inline void ControllerFrame::clear_b_right_trigger() {
  b_right_trigger_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ControllerFrame::_internal_b_right_trigger() const {
  return b_right_trigger_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ControllerFrame::b_right_trigger() const {
  // @@protoc_insertion_point(field_get:fp_proto.ControllerFrame.b_right_trigger)
  return _internal_b_right_trigger();
}
inline void ControllerFrame::_internal_set_b_right_trigger(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  b_right_trigger_ = value;
}
inline void ControllerFrame::set_b_right_trigger(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_b_right_trigger(value);
  // @@protoc_insertion_point(field_set:fp_proto.ControllerFrame.b_right_trigger)
}

// uint32 s_thumb_LX = 5;
inline void ControllerFrame::clear_s_thumb_lx() {
  s_thumb_lx_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ControllerFrame::_internal_s_thumb_lx() const {
  return s_thumb_lx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ControllerFrame::s_thumb_lx() const {
  // @@protoc_insertion_point(field_get:fp_proto.ControllerFrame.s_thumb_LX)
  return _internal_s_thumb_lx();
}
inline void ControllerFrame::_internal_set_s_thumb_lx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  s_thumb_lx_ = value;
}
inline void ControllerFrame::set_s_thumb_lx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_s_thumb_lx(value);
  // @@protoc_insertion_point(field_set:fp_proto.ControllerFrame.s_thumb_LX)
}

// uint32 s_thumb_LY = 6;
inline void ControllerFrame::clear_s_thumb_ly() {
  s_thumb_ly_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ControllerFrame::_internal_s_thumb_ly() const {
  return s_thumb_ly_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ControllerFrame::s_thumb_ly() const {
  // @@protoc_insertion_point(field_get:fp_proto.ControllerFrame.s_thumb_LY)
  return _internal_s_thumb_ly();
}
inline void ControllerFrame::_internal_set_s_thumb_ly(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  s_thumb_ly_ = value;
}
inline void ControllerFrame::set_s_thumb_ly(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_s_thumb_ly(value);
  // @@protoc_insertion_point(field_set:fp_proto.ControllerFrame.s_thumb_LY)
}

// uint32 s_thumb_RX = 7;
inline void ControllerFrame::clear_s_thumb_rx() {
  s_thumb_rx_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ControllerFrame::_internal_s_thumb_rx() const {
  return s_thumb_rx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ControllerFrame::s_thumb_rx() const {
  // @@protoc_insertion_point(field_get:fp_proto.ControllerFrame.s_thumb_RX)
  return _internal_s_thumb_rx();
}
inline void ControllerFrame::_internal_set_s_thumb_rx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  s_thumb_rx_ = value;
}
inline void ControllerFrame::set_s_thumb_rx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_s_thumb_rx(value);
  // @@protoc_insertion_point(field_set:fp_proto.ControllerFrame.s_thumb_RX)
}

// uint32 s_thumb_RY = 8;
inline void ControllerFrame::clear_s_thumb_ry() {
  s_thumb_ry_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ControllerFrame::_internal_s_thumb_ry() const {
  return s_thumb_ry_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ControllerFrame::s_thumb_ry() const {
  // @@protoc_insertion_point(field_get:fp_proto.ControllerFrame.s_thumb_RY)
  return _internal_s_thumb_ry();
}
inline void ControllerFrame::_internal_set_s_thumb_ry(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  s_thumb_ry_ = value;
}
inline void ControllerFrame::set_s_thumb_ry(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_s_thumb_ry(value);
  // @@protoc_insertion_point(field_set:fp_proto.ControllerFrame.s_thumb_RY)
}

// -------------------------------------------------------------------

// RequestToHost

// .fp_proto.RequestToHost.RequestType type = 1;
inline void RequestToHost::clear_type() {
  type_ = 0;
}
inline ::fp_proto::RequestToHost_RequestType RequestToHost::_internal_type() const {
  return static_cast< ::fp_proto::RequestToHost_RequestType >(type_);
}
inline ::fp_proto::RequestToHost_RequestType RequestToHost::type() const {
  // @@protoc_insertion_point(field_get:fp_proto.RequestToHost.type)
  return _internal_type();
}
inline void RequestToHost::_internal_set_type(::fp_proto::RequestToHost_RequestType value) {
  
  type_ = value;
}
inline void RequestToHost::set_type(::fp_proto::RequestToHost_RequestType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:fp_proto.RequestToHost.type)
}

// -------------------------------------------------------------------

// ClientState

// .fp_proto.ClientState.State state = 1;
inline void ClientState::clear_state() {
  state_ = 0;
}
inline ::fp_proto::ClientState_State ClientState::_internal_state() const {
  return static_cast< ::fp_proto::ClientState_State >(state_);
}
inline ::fp_proto::ClientState_State ClientState::state() const {
  // @@protoc_insertion_point(field_get:fp_proto.ClientState.state)
  return _internal_state();
}
inline void ClientState::_internal_set_state(::fp_proto::ClientState_State value) {
  
  state_ = value;
}
inline void ClientState::set_state(::fp_proto::ClientState_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:fp_proto.ClientState.state)
}

// -------------------------------------------------------------------

// ClientDataFrame

// uint32 frame_id = 1;
inline void ClientDataFrame::clear_frame_id() {
  frame_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ClientDataFrame::_internal_frame_id() const {
  return frame_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ClientDataFrame::frame_id() const {
  // @@protoc_insertion_point(field_get:fp_proto.ClientDataFrame.frame_id)
  return _internal_frame_id();
}
inline void ClientDataFrame::_internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  frame_id_ = value;
}
inline void ClientDataFrame::set_frame_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:fp_proto.ClientDataFrame.frame_id)
}

// .fp_proto.KeyboardFrame keyboard = 2;
inline bool ClientDataFrame::_internal_has_keyboard() const {
  return DataFrame_case() == kKeyboard;
}
inline bool ClientDataFrame::has_keyboard() const {
  return _internal_has_keyboard();
}
inline void ClientDataFrame::set_has_keyboard() {
  _oneof_case_[0] = kKeyboard;
}
inline void ClientDataFrame::clear_keyboard() {
  if (_internal_has_keyboard()) {
    if (GetArena() == nullptr) {
      delete DataFrame_.keyboard_;
    }
    clear_has_DataFrame();
  }
}
inline ::fp_proto::KeyboardFrame* ClientDataFrame::release_keyboard() {
  // @@protoc_insertion_point(field_release:fp_proto.ClientDataFrame.keyboard)
  if (_internal_has_keyboard()) {
    clear_has_DataFrame();
      ::fp_proto::KeyboardFrame* temp = DataFrame_.keyboard_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    DataFrame_.keyboard_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::fp_proto::KeyboardFrame& ClientDataFrame::_internal_keyboard() const {
  return _internal_has_keyboard()
      ? *DataFrame_.keyboard_
      : *reinterpret_cast< ::fp_proto::KeyboardFrame*>(&::fp_proto::_KeyboardFrame_default_instance_);
}
inline const ::fp_proto::KeyboardFrame& ClientDataFrame::keyboard() const {
  // @@protoc_insertion_point(field_get:fp_proto.ClientDataFrame.keyboard)
  return _internal_keyboard();
}
inline ::fp_proto::KeyboardFrame* ClientDataFrame::unsafe_arena_release_keyboard() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fp_proto.ClientDataFrame.keyboard)
  if (_internal_has_keyboard()) {
    clear_has_DataFrame();
    ::fp_proto::KeyboardFrame* temp = DataFrame_.keyboard_;
    DataFrame_.keyboard_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientDataFrame::unsafe_arena_set_allocated_keyboard(::fp_proto::KeyboardFrame* keyboard) {
  clear_DataFrame();
  if (keyboard) {
    set_has_keyboard();
    DataFrame_.keyboard_ = keyboard;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fp_proto.ClientDataFrame.keyboard)
}
inline ::fp_proto::KeyboardFrame* ClientDataFrame::_internal_mutable_keyboard() {
  if (!_internal_has_keyboard()) {
    clear_DataFrame();
    set_has_keyboard();
    DataFrame_.keyboard_ = CreateMaybeMessage< ::fp_proto::KeyboardFrame >(GetArena());
  }
  return DataFrame_.keyboard_;
}
inline ::fp_proto::KeyboardFrame* ClientDataFrame::mutable_keyboard() {
  // @@protoc_insertion_point(field_mutable:fp_proto.ClientDataFrame.keyboard)
  return _internal_mutable_keyboard();
}

// .fp_proto.MouseFrame mouse = 3;
inline bool ClientDataFrame::_internal_has_mouse() const {
  return DataFrame_case() == kMouse;
}
inline bool ClientDataFrame::has_mouse() const {
  return _internal_has_mouse();
}
inline void ClientDataFrame::set_has_mouse() {
  _oneof_case_[0] = kMouse;
}
inline void ClientDataFrame::clear_mouse() {
  if (_internal_has_mouse()) {
    if (GetArena() == nullptr) {
      delete DataFrame_.mouse_;
    }
    clear_has_DataFrame();
  }
}
inline ::fp_proto::MouseFrame* ClientDataFrame::release_mouse() {
  // @@protoc_insertion_point(field_release:fp_proto.ClientDataFrame.mouse)
  if (_internal_has_mouse()) {
    clear_has_DataFrame();
      ::fp_proto::MouseFrame* temp = DataFrame_.mouse_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    DataFrame_.mouse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::fp_proto::MouseFrame& ClientDataFrame::_internal_mouse() const {
  return _internal_has_mouse()
      ? *DataFrame_.mouse_
      : *reinterpret_cast< ::fp_proto::MouseFrame*>(&::fp_proto::_MouseFrame_default_instance_);
}
inline const ::fp_proto::MouseFrame& ClientDataFrame::mouse() const {
  // @@protoc_insertion_point(field_get:fp_proto.ClientDataFrame.mouse)
  return _internal_mouse();
}
inline ::fp_proto::MouseFrame* ClientDataFrame::unsafe_arena_release_mouse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fp_proto.ClientDataFrame.mouse)
  if (_internal_has_mouse()) {
    clear_has_DataFrame();
    ::fp_proto::MouseFrame* temp = DataFrame_.mouse_;
    DataFrame_.mouse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientDataFrame::unsafe_arena_set_allocated_mouse(::fp_proto::MouseFrame* mouse) {
  clear_DataFrame();
  if (mouse) {
    set_has_mouse();
    DataFrame_.mouse_ = mouse;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fp_proto.ClientDataFrame.mouse)
}
inline ::fp_proto::MouseFrame* ClientDataFrame::_internal_mutable_mouse() {
  if (!_internal_has_mouse()) {
    clear_DataFrame();
    set_has_mouse();
    DataFrame_.mouse_ = CreateMaybeMessage< ::fp_proto::MouseFrame >(GetArena());
  }
  return DataFrame_.mouse_;
}
inline ::fp_proto::MouseFrame* ClientDataFrame::mutable_mouse() {
  // @@protoc_insertion_point(field_mutable:fp_proto.ClientDataFrame.mouse)
  return _internal_mutable_mouse();
}

// .fp_proto.ControllerFrame controller = 4;
inline bool ClientDataFrame::_internal_has_controller() const {
  return DataFrame_case() == kController;
}
inline bool ClientDataFrame::has_controller() const {
  return _internal_has_controller();
}
inline void ClientDataFrame::set_has_controller() {
  _oneof_case_[0] = kController;
}
inline void ClientDataFrame::clear_controller() {
  if (_internal_has_controller()) {
    if (GetArena() == nullptr) {
      delete DataFrame_.controller_;
    }
    clear_has_DataFrame();
  }
}
inline ::fp_proto::ControllerFrame* ClientDataFrame::release_controller() {
  // @@protoc_insertion_point(field_release:fp_proto.ClientDataFrame.controller)
  if (_internal_has_controller()) {
    clear_has_DataFrame();
      ::fp_proto::ControllerFrame* temp = DataFrame_.controller_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    DataFrame_.controller_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::fp_proto::ControllerFrame& ClientDataFrame::_internal_controller() const {
  return _internal_has_controller()
      ? *DataFrame_.controller_
      : *reinterpret_cast< ::fp_proto::ControllerFrame*>(&::fp_proto::_ControllerFrame_default_instance_);
}
inline const ::fp_proto::ControllerFrame& ClientDataFrame::controller() const {
  // @@protoc_insertion_point(field_get:fp_proto.ClientDataFrame.controller)
  return _internal_controller();
}
inline ::fp_proto::ControllerFrame* ClientDataFrame::unsafe_arena_release_controller() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fp_proto.ClientDataFrame.controller)
  if (_internal_has_controller()) {
    clear_has_DataFrame();
    ::fp_proto::ControllerFrame* temp = DataFrame_.controller_;
    DataFrame_.controller_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientDataFrame::unsafe_arena_set_allocated_controller(::fp_proto::ControllerFrame* controller) {
  clear_DataFrame();
  if (controller) {
    set_has_controller();
    DataFrame_.controller_ = controller;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fp_proto.ClientDataFrame.controller)
}
inline ::fp_proto::ControllerFrame* ClientDataFrame::_internal_mutable_controller() {
  if (!_internal_has_controller()) {
    clear_DataFrame();
    set_has_controller();
    DataFrame_.controller_ = CreateMaybeMessage< ::fp_proto::ControllerFrame >(GetArena());
  }
  return DataFrame_.controller_;
}
inline ::fp_proto::ControllerFrame* ClientDataFrame::mutable_controller() {
  // @@protoc_insertion_point(field_mutable:fp_proto.ClientDataFrame.controller)
  return _internal_mutable_controller();
}

// .fp_proto.RequestToHost host_request = 5;
inline bool ClientDataFrame::_internal_has_host_request() const {
  return DataFrame_case() == kHostRequest;
}
inline bool ClientDataFrame::has_host_request() const {
  return _internal_has_host_request();
}
inline void ClientDataFrame::set_has_host_request() {
  _oneof_case_[0] = kHostRequest;
}
inline void ClientDataFrame::clear_host_request() {
  if (_internal_has_host_request()) {
    if (GetArena() == nullptr) {
      delete DataFrame_.host_request_;
    }
    clear_has_DataFrame();
  }
}
inline ::fp_proto::RequestToHost* ClientDataFrame::release_host_request() {
  // @@protoc_insertion_point(field_release:fp_proto.ClientDataFrame.host_request)
  if (_internal_has_host_request()) {
    clear_has_DataFrame();
      ::fp_proto::RequestToHost* temp = DataFrame_.host_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    DataFrame_.host_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::fp_proto::RequestToHost& ClientDataFrame::_internal_host_request() const {
  return _internal_has_host_request()
      ? *DataFrame_.host_request_
      : *reinterpret_cast< ::fp_proto::RequestToHost*>(&::fp_proto::_RequestToHost_default_instance_);
}
inline const ::fp_proto::RequestToHost& ClientDataFrame::host_request() const {
  // @@protoc_insertion_point(field_get:fp_proto.ClientDataFrame.host_request)
  return _internal_host_request();
}
inline ::fp_proto::RequestToHost* ClientDataFrame::unsafe_arena_release_host_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fp_proto.ClientDataFrame.host_request)
  if (_internal_has_host_request()) {
    clear_has_DataFrame();
    ::fp_proto::RequestToHost* temp = DataFrame_.host_request_;
    DataFrame_.host_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientDataFrame::unsafe_arena_set_allocated_host_request(::fp_proto::RequestToHost* host_request) {
  clear_DataFrame();
  if (host_request) {
    set_has_host_request();
    DataFrame_.host_request_ = host_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fp_proto.ClientDataFrame.host_request)
}
inline ::fp_proto::RequestToHost* ClientDataFrame::_internal_mutable_host_request() {
  if (!_internal_has_host_request()) {
    clear_DataFrame();
    set_has_host_request();
    DataFrame_.host_request_ = CreateMaybeMessage< ::fp_proto::RequestToHost >(GetArena());
  }
  return DataFrame_.host_request_;
}
inline ::fp_proto::RequestToHost* ClientDataFrame::mutable_host_request() {
  // @@protoc_insertion_point(field_mutable:fp_proto.ClientDataFrame.host_request)
  return _internal_mutable_host_request();
}

// .fp_proto.ClientState client_state = 6;
inline bool ClientDataFrame::_internal_has_client_state() const {
  return DataFrame_case() == kClientState;
}
inline bool ClientDataFrame::has_client_state() const {
  return _internal_has_client_state();
}
inline void ClientDataFrame::set_has_client_state() {
  _oneof_case_[0] = kClientState;
}
inline void ClientDataFrame::clear_client_state() {
  if (_internal_has_client_state()) {
    if (GetArena() == nullptr) {
      delete DataFrame_.client_state_;
    }
    clear_has_DataFrame();
  }
}
inline ::fp_proto::ClientState* ClientDataFrame::release_client_state() {
  // @@protoc_insertion_point(field_release:fp_proto.ClientDataFrame.client_state)
  if (_internal_has_client_state()) {
    clear_has_DataFrame();
      ::fp_proto::ClientState* temp = DataFrame_.client_state_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    DataFrame_.client_state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::fp_proto::ClientState& ClientDataFrame::_internal_client_state() const {
  return _internal_has_client_state()
      ? *DataFrame_.client_state_
      : *reinterpret_cast< ::fp_proto::ClientState*>(&::fp_proto::_ClientState_default_instance_);
}
inline const ::fp_proto::ClientState& ClientDataFrame::client_state() const {
  // @@protoc_insertion_point(field_get:fp_proto.ClientDataFrame.client_state)
  return _internal_client_state();
}
inline ::fp_proto::ClientState* ClientDataFrame::unsafe_arena_release_client_state() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fp_proto.ClientDataFrame.client_state)
  if (_internal_has_client_state()) {
    clear_has_DataFrame();
    ::fp_proto::ClientState* temp = DataFrame_.client_state_;
    DataFrame_.client_state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientDataFrame::unsafe_arena_set_allocated_client_state(::fp_proto::ClientState* client_state) {
  clear_DataFrame();
  if (client_state) {
    set_has_client_state();
    DataFrame_.client_state_ = client_state;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fp_proto.ClientDataFrame.client_state)
}
inline ::fp_proto::ClientState* ClientDataFrame::_internal_mutable_client_state() {
  if (!_internal_has_client_state()) {
    clear_DataFrame();
    set_has_client_state();
    DataFrame_.client_state_ = CreateMaybeMessage< ::fp_proto::ClientState >(GetArena());
  }
  return DataFrame_.client_state_;
}
inline ::fp_proto::ClientState* ClientDataFrame::mutable_client_state() {
  // @@protoc_insertion_point(field_mutable:fp_proto.ClientDataFrame.client_state)
  return _internal_mutable_client_state();
}

inline bool ClientDataFrame::has_DataFrame() const {
  return DataFrame_case() != DATAFRAME_NOT_SET;
}
inline void ClientDataFrame::clear_has_DataFrame() {
  _oneof_case_[0] = DATAFRAME_NOT_SET;
}
inline ClientDataFrame::DataFrameCase ClientDataFrame::DataFrame_case() const {
  return ClientDataFrame::DataFrameCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fp_proto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::fp_proto::MouseFrame_MouseButtons> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fp_proto::MouseFrame_MouseButtons>() {
  return ::fp_proto::MouseFrame_MouseButtons_descriptor();
}
template <> struct is_proto_enum< ::fp_proto::RequestToHost_RequestType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fp_proto::RequestToHost_RequestType>() {
  return ::fp_proto::RequestToHost_RequestType_descriptor();
}
template <> struct is_proto_enum< ::fp_proto::ClientState_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fp_proto::ClientState_State>() {
  return ::fp_proto::ClientState_State_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_client_5fmessages_2eproto
