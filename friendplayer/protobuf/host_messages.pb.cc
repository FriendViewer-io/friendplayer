// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: host_messages.proto

#include "host_messages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_host_5fmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioFrame_host_5fmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_host_5fmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VideoFrame_host_5fmessages_2eproto;
namespace fp_proto {
class VideoFrameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VideoFrame> _instance;
} _VideoFrame_default_instance_;
class AudioFrameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AudioFrame> _instance;
} _AudioFrame_default_instance_;
class HostDataFrameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HostDataFrame> _instance;
  const ::fp_proto::VideoFrame* video_;
  const ::fp_proto::AudioFrame* audio_;
} _HostDataFrame_default_instance_;
}  // namespace fp_proto
static void InitDefaultsscc_info_AudioFrame_host_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fp_proto::_AudioFrame_default_instance_;
    new (ptr) ::fp_proto::AudioFrame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fp_proto::AudioFrame::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioFrame_host_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AudioFrame_host_5fmessages_2eproto}, {}};

static void InitDefaultsscc_info_HostDataFrame_host_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fp_proto::_HostDataFrame_default_instance_;
    new (ptr) ::fp_proto::HostDataFrame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fp_proto::HostDataFrame::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_HostDataFrame_host_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_HostDataFrame_host_5fmessages_2eproto}, {
      &scc_info_VideoFrame_host_5fmessages_2eproto.base,
      &scc_info_AudioFrame_host_5fmessages_2eproto.base,}};

static void InitDefaultsscc_info_VideoFrame_host_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fp_proto::_VideoFrame_default_instance_;
    new (ptr) ::fp_proto::VideoFrame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fp_proto::VideoFrame::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VideoFrame_host_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VideoFrame_host_5fmessages_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_host_5fmessages_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_host_5fmessages_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_host_5fmessages_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_host_5fmessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fp_proto::VideoFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fp_proto::VideoFrame, chunk_offset_),
  PROTOBUF_FIELD_OFFSET(::fp_proto::VideoFrame, is_idr_frame_),
  PROTOBUF_FIELD_OFFSET(::fp_proto::VideoFrame, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fp_proto::AudioFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fp_proto::AudioFrame, chunk_offset_),
  PROTOBUF_FIELD_OFFSET(::fp_proto::AudioFrame, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fp_proto::HostDataFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::fp_proto::HostDataFrame, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fp_proto::HostDataFrame, frame_num_),
  PROTOBUF_FIELD_OFFSET(::fp_proto::HostDataFrame, frame_size_),
  PROTOBUF_FIELD_OFFSET(::fp_proto::HostDataFrame, stream_point_),
  offsetof(::fp_proto::HostDataFrameDefaultTypeInternal, video_),
  offsetof(::fp_proto::HostDataFrameDefaultTypeInternal, audio_),
  PROTOBUF_FIELD_OFFSET(::fp_proto::HostDataFrame, DataFrame_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::fp_proto::VideoFrame)},
  { 8, -1, sizeof(::fp_proto::AudioFrame)},
  { 15, -1, sizeof(::fp_proto::HostDataFrame)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fp_proto::_VideoFrame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fp_proto::_AudioFrame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fp_proto::_HostDataFrame_default_instance_),
};

const char descriptor_table_protodef_host_5fmessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023host_messages.proto\022\010fp_proto\"F\n\nVideo"
  "Frame\022\024\n\014chunk_offset\030\001 \001(\r\022\024\n\014is_idr_fr"
  "ame\030\002 \001(\010\022\014\n\004data\030\003 \001(\014\"0\n\nAudioFrame\022\024\n"
  "\014chunk_offset\030\001 \001(\r\022\014\n\004data\030\002 \001(\014\"\247\001\n\rHo"
  "stDataFrame\022\021\n\tframe_num\030\001 \001(\r\022\022\n\nframe_"
  "size\030\002 \001(\r\022\024\n\014stream_point\030\003 \001(\r\022%\n\005vide"
  "o\030\004 \001(\0132\024.fp_proto.VideoFrameH\000\022%\n\005audio"
  "\030\005 \001(\0132\024.fp_proto.AudioFrameH\000B\013\n\tDataFr"
  "ameb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_host_5fmessages_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_host_5fmessages_2eproto_sccs[3] = {
  &scc_info_AudioFrame_host_5fmessages_2eproto.base,
  &scc_info_HostDataFrame_host_5fmessages_2eproto.base,
  &scc_info_VideoFrame_host_5fmessages_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_host_5fmessages_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_host_5fmessages_2eproto = {
  false, false, descriptor_table_protodef_host_5fmessages_2eproto, "host_messages.proto", 331,
  &descriptor_table_host_5fmessages_2eproto_once, descriptor_table_host_5fmessages_2eproto_sccs, descriptor_table_host_5fmessages_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_host_5fmessages_2eproto::offsets,
  file_level_metadata_host_5fmessages_2eproto, 3, file_level_enum_descriptors_host_5fmessages_2eproto, file_level_service_descriptors_host_5fmessages_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_host_5fmessages_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_host_5fmessages_2eproto)), true);
namespace fp_proto {

// ===================================================================

void VideoFrame::InitAsDefaultInstance() {
}
class VideoFrame::_Internal {
 public:
};

VideoFrame::VideoFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fp_proto.VideoFrame)
}
VideoFrame::VideoFrame(const VideoFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  ::memcpy(&chunk_offset_, &from.chunk_offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_idr_frame_) -
    reinterpret_cast<char*>(&chunk_offset_)) + sizeof(is_idr_frame_));
  // @@protoc_insertion_point(copy_constructor:fp_proto.VideoFrame)
}

void VideoFrame::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VideoFrame_host_5fmessages_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&chunk_offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_idr_frame_) -
      reinterpret_cast<char*>(&chunk_offset_)) + sizeof(is_idr_frame_));
}

VideoFrame::~VideoFrame() {
  // @@protoc_insertion_point(destructor:fp_proto.VideoFrame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VideoFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VideoFrame::ArenaDtor(void* object) {
  VideoFrame* _this = reinterpret_cast< VideoFrame* >(object);
  (void)_this;
}
void VideoFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VideoFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VideoFrame& VideoFrame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VideoFrame_host_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void VideoFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:fp_proto.VideoFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&chunk_offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_idr_frame_) -
      reinterpret_cast<char*>(&chunk_offset_)) + sizeof(is_idr_frame_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VideoFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 chunk_offset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chunk_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_idr_frame = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_idr_frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VideoFrame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fp_proto.VideoFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 chunk_offset = 1;
  if (this->chunk_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_chunk_offset(), target);
  }

  // bool is_idr_frame = 2;
  if (this->is_idr_frame() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_idr_frame(), target);
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fp_proto.VideoFrame)
  return target;
}

size_t VideoFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fp_proto.VideoFrame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // uint32 chunk_offset = 1;
  if (this->chunk_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_chunk_offset());
  }

  // bool is_idr_frame = 2;
  if (this->is_idr_frame() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VideoFrame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fp_proto.VideoFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoFrame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VideoFrame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fp_proto.VideoFrame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fp_proto.VideoFrame)
    MergeFrom(*source);
  }
}

void VideoFrame::MergeFrom(const VideoFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fp_proto.VideoFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.chunk_offset() != 0) {
    _internal_set_chunk_offset(from._internal_chunk_offset());
  }
  if (from.is_idr_frame() != 0) {
    _internal_set_is_idr_frame(from._internal_is_idr_frame());
  }
}

void VideoFrame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fp_proto.VideoFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoFrame::CopyFrom(const VideoFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fp_proto.VideoFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoFrame::IsInitialized() const {
  return true;
}

void VideoFrame::InternalSwap(VideoFrame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VideoFrame, is_idr_frame_)
      + sizeof(VideoFrame::is_idr_frame_)
      - PROTOBUF_FIELD_OFFSET(VideoFrame, chunk_offset_)>(
          reinterpret_cast<char*>(&chunk_offset_),
          reinterpret_cast<char*>(&other->chunk_offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoFrame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AudioFrame::InitAsDefaultInstance() {
}
class AudioFrame::_Internal {
 public:
};

AudioFrame::AudioFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fp_proto.AudioFrame)
}
AudioFrame::AudioFrame(const AudioFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  chunk_offset_ = from.chunk_offset_;
  // @@protoc_insertion_point(copy_constructor:fp_proto.AudioFrame)
}

void AudioFrame::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AudioFrame_host_5fmessages_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chunk_offset_ = 0u;
}

AudioFrame::~AudioFrame() {
  // @@protoc_insertion_point(destructor:fp_proto.AudioFrame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AudioFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AudioFrame::ArenaDtor(void* object) {
  AudioFrame* _this = reinterpret_cast< AudioFrame* >(object);
  (void)_this;
}
void AudioFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AudioFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AudioFrame& AudioFrame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AudioFrame_host_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void AudioFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:fp_proto.AudioFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  chunk_offset_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 chunk_offset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chunk_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AudioFrame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fp_proto.AudioFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 chunk_offset = 1;
  if (this->chunk_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_chunk_offset(), target);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fp_proto.AudioFrame)
  return target;
}

size_t AudioFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fp_proto.AudioFrame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // uint32 chunk_offset = 1;
  if (this->chunk_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_chunk_offset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioFrame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fp_proto.AudioFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioFrame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AudioFrame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fp_proto.AudioFrame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fp_proto.AudioFrame)
    MergeFrom(*source);
  }
}

void AudioFrame::MergeFrom(const AudioFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fp_proto.AudioFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.chunk_offset() != 0) {
    _internal_set_chunk_offset(from._internal_chunk_offset());
  }
}

void AudioFrame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fp_proto.AudioFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioFrame::CopyFrom(const AudioFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fp_proto.AudioFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioFrame::IsInitialized() const {
  return true;
}

void AudioFrame::InternalSwap(AudioFrame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(chunk_offset_, other->chunk_offset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioFrame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HostDataFrame::InitAsDefaultInstance() {
  ::fp_proto::_HostDataFrame_default_instance_.video_ = const_cast< ::fp_proto::VideoFrame*>(
      ::fp_proto::VideoFrame::internal_default_instance());
  ::fp_proto::_HostDataFrame_default_instance_.audio_ = const_cast< ::fp_proto::AudioFrame*>(
      ::fp_proto::AudioFrame::internal_default_instance());
}
class HostDataFrame::_Internal {
 public:
  static const ::fp_proto::VideoFrame& video(const HostDataFrame* msg);
  static const ::fp_proto::AudioFrame& audio(const HostDataFrame* msg);
};

const ::fp_proto::VideoFrame&
HostDataFrame::_Internal::video(const HostDataFrame* msg) {
  return *msg->DataFrame_.video_;
}
const ::fp_proto::AudioFrame&
HostDataFrame::_Internal::audio(const HostDataFrame* msg) {
  return *msg->DataFrame_.audio_;
}
void HostDataFrame::set_allocated_video(::fp_proto::VideoFrame* video) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_DataFrame();
  if (video) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(video);
    if (message_arena != submessage_arena) {
      video = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, video, submessage_arena);
    }
    set_has_video();
    DataFrame_.video_ = video;
  }
  // @@protoc_insertion_point(field_set_allocated:fp_proto.HostDataFrame.video)
}
void HostDataFrame::set_allocated_audio(::fp_proto::AudioFrame* audio) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_DataFrame();
  if (audio) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(audio);
    if (message_arena != submessage_arena) {
      audio = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, audio, submessage_arena);
    }
    set_has_audio();
    DataFrame_.audio_ = audio;
  }
  // @@protoc_insertion_point(field_set_allocated:fp_proto.HostDataFrame.audio)
}
HostDataFrame::HostDataFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fp_proto.HostDataFrame)
}
HostDataFrame::HostDataFrame(const HostDataFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&frame_num_, &from.frame_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&stream_point_) -
    reinterpret_cast<char*>(&frame_num_)) + sizeof(stream_point_));
  clear_has_DataFrame();
  switch (from.DataFrame_case()) {
    case kVideo: {
      _internal_mutable_video()->::fp_proto::VideoFrame::MergeFrom(from._internal_video());
      break;
    }
    case kAudio: {
      _internal_mutable_audio()->::fp_proto::AudioFrame::MergeFrom(from._internal_audio());
      break;
    }
    case DATAFRAME_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:fp_proto.HostDataFrame)
}

void HostDataFrame::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HostDataFrame_host_5fmessages_2eproto.base);
  ::memset(&frame_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stream_point_) -
      reinterpret_cast<char*>(&frame_num_)) + sizeof(stream_point_));
  clear_has_DataFrame();
}

HostDataFrame::~HostDataFrame() {
  // @@protoc_insertion_point(destructor:fp_proto.HostDataFrame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HostDataFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_DataFrame()) {
    clear_DataFrame();
  }
}

void HostDataFrame::ArenaDtor(void* object) {
  HostDataFrame* _this = reinterpret_cast< HostDataFrame* >(object);
  (void)_this;
}
void HostDataFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HostDataFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HostDataFrame& HostDataFrame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HostDataFrame_host_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void HostDataFrame::clear_DataFrame() {
// @@protoc_insertion_point(one_of_clear_start:fp_proto.HostDataFrame)
  switch (DataFrame_case()) {
    case kVideo: {
      if (GetArena() == nullptr) {
        delete DataFrame_.video_;
      }
      break;
    }
    case kAudio: {
      if (GetArena() == nullptr) {
        delete DataFrame_.audio_;
      }
      break;
    }
    case DATAFRAME_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATAFRAME_NOT_SET;
}


void HostDataFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:fp_proto.HostDataFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&frame_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stream_point_) -
      reinterpret_cast<char*>(&frame_num_)) + sizeof(stream_point_));
  clear_DataFrame();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HostDataFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 frame_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          frame_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 frame_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          frame_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 stream_point = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          stream_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fp_proto.VideoFrame video = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_video(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fp_proto.AudioFrame audio = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HostDataFrame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fp_proto.HostDataFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 frame_num = 1;
  if (this->frame_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_frame_num(), target);
  }

  // uint32 frame_size = 2;
  if (this->frame_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_frame_size(), target);
  }

  // uint32 stream_point = 3;
  if (this->stream_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_stream_point(), target);
  }

  // .fp_proto.VideoFrame video = 4;
  if (_internal_has_video()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::video(this), target, stream);
  }

  // .fp_proto.AudioFrame audio = 5;
  if (_internal_has_audio()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::audio(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fp_proto.HostDataFrame)
  return target;
}

size_t HostDataFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fp_proto.HostDataFrame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 frame_num = 1;
  if (this->frame_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_frame_num());
  }

  // uint32 frame_size = 2;
  if (this->frame_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_frame_size());
  }

  // uint32 stream_point = 3;
  if (this->stream_point() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stream_point());
  }

  switch (DataFrame_case()) {
    // .fp_proto.VideoFrame video = 4;
    case kVideo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *DataFrame_.video_);
      break;
    }
    // .fp_proto.AudioFrame audio = 5;
    case kAudio: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *DataFrame_.audio_);
      break;
    }
    case DATAFRAME_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HostDataFrame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fp_proto.HostDataFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const HostDataFrame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HostDataFrame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fp_proto.HostDataFrame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fp_proto.HostDataFrame)
    MergeFrom(*source);
  }
}

void HostDataFrame::MergeFrom(const HostDataFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fp_proto.HostDataFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.frame_num() != 0) {
    _internal_set_frame_num(from._internal_frame_num());
  }
  if (from.frame_size() != 0) {
    _internal_set_frame_size(from._internal_frame_size());
  }
  if (from.stream_point() != 0) {
    _internal_set_stream_point(from._internal_stream_point());
  }
  switch (from.DataFrame_case()) {
    case kVideo: {
      _internal_mutable_video()->::fp_proto::VideoFrame::MergeFrom(from._internal_video());
      break;
    }
    case kAudio: {
      _internal_mutable_audio()->::fp_proto::AudioFrame::MergeFrom(from._internal_audio());
      break;
    }
    case DATAFRAME_NOT_SET: {
      break;
    }
  }
}

void HostDataFrame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fp_proto.HostDataFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HostDataFrame::CopyFrom(const HostDataFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fp_proto.HostDataFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostDataFrame::IsInitialized() const {
  return true;
}

void HostDataFrame::InternalSwap(HostDataFrame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HostDataFrame, stream_point_)
      + sizeof(HostDataFrame::stream_point_)
      - PROTOBUF_FIELD_OFFSET(HostDataFrame, frame_num_)>(
          reinterpret_cast<char*>(&frame_num_),
          reinterpret_cast<char*>(&other->frame_num_));
  swap(DataFrame_, other->DataFrame_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata HostDataFrame::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace fp_proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::fp_proto::VideoFrame* Arena::CreateMaybeMessage< ::fp_proto::VideoFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fp_proto::VideoFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::fp_proto::AudioFrame* Arena::CreateMaybeMessage< ::fp_proto::AudioFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fp_proto::AudioFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::fp_proto::HostDataFrame* Arena::CreateMaybeMessage< ::fp_proto::HostDataFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fp_proto::HostDataFrame >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
