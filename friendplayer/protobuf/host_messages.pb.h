// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: host_messages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_host_5fmessages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_host_5fmessages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_host_5fmessages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_host_5fmessages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_host_5fmessages_2eproto;
namespace fp_proto {
class AudioFrame;
class AudioFrameDefaultTypeInternal;
extern AudioFrameDefaultTypeInternal _AudioFrame_default_instance_;
class HostDataFrame;
class HostDataFrameDefaultTypeInternal;
extern HostDataFrameDefaultTypeInternal _HostDataFrame_default_instance_;
class VideoFrame;
class VideoFrameDefaultTypeInternal;
extern VideoFrameDefaultTypeInternal _VideoFrame_default_instance_;
}  // namespace fp_proto
PROTOBUF_NAMESPACE_OPEN
template<> ::fp_proto::AudioFrame* Arena::CreateMaybeMessage<::fp_proto::AudioFrame>(Arena*);
template<> ::fp_proto::HostDataFrame* Arena::CreateMaybeMessage<::fp_proto::HostDataFrame>(Arena*);
template<> ::fp_proto::VideoFrame* Arena::CreateMaybeMessage<::fp_proto::VideoFrame>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace fp_proto {

// ===================================================================

class VideoFrame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fp_proto.VideoFrame) */ {
 public:
  inline VideoFrame() : VideoFrame(nullptr) {}
  virtual ~VideoFrame();

  VideoFrame(const VideoFrame& from);
  VideoFrame(VideoFrame&& from) noexcept
    : VideoFrame() {
    *this = ::std::move(from);
  }

  inline VideoFrame& operator=(const VideoFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoFrame& operator=(VideoFrame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VideoFrame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VideoFrame* internal_default_instance() {
    return reinterpret_cast<const VideoFrame*>(
               &_VideoFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VideoFrame& a, VideoFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoFrame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VideoFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VideoFrame* New() const final {
    return CreateMaybeMessage<VideoFrame>(nullptr);
  }

  VideoFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VideoFrame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VideoFrame& from);
  void MergeFrom(const VideoFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fp_proto.VideoFrame";
  }
  protected:
  explicit VideoFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_host_5fmessages_2eproto);
    return ::descriptor_table_host_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kChunkOffsetFieldNumber = 1,
    kIsIdrFrameFieldNumber = 2,
  };
  // bytes data = 3;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint32 chunk_offset = 1;
  void clear_chunk_offset();
  ::PROTOBUF_NAMESPACE_ID::uint32 chunk_offset() const;
  void set_chunk_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_chunk_offset() const;
  void _internal_set_chunk_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool is_idr_frame = 2;
  void clear_is_idr_frame();
  bool is_idr_frame() const;
  void set_is_idr_frame(bool value);
  private:
  bool _internal_is_idr_frame() const;
  void _internal_set_is_idr_frame(bool value);
  public:

  // @@protoc_insertion_point(class_scope:fp_proto.VideoFrame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 chunk_offset_;
  bool is_idr_frame_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_host_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class AudioFrame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fp_proto.AudioFrame) */ {
 public:
  inline AudioFrame() : AudioFrame(nullptr) {}
  virtual ~AudioFrame();

  AudioFrame(const AudioFrame& from);
  AudioFrame(AudioFrame&& from) noexcept
    : AudioFrame() {
    *this = ::std::move(from);
  }

  inline AudioFrame& operator=(const AudioFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioFrame& operator=(AudioFrame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AudioFrame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AudioFrame* internal_default_instance() {
    return reinterpret_cast<const AudioFrame*>(
               &_AudioFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AudioFrame& a, AudioFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioFrame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AudioFrame* New() const final {
    return CreateMaybeMessage<AudioFrame>(nullptr);
  }

  AudioFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AudioFrame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AudioFrame& from);
  void MergeFrom(const AudioFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fp_proto.AudioFrame";
  }
  protected:
  explicit AudioFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_host_5fmessages_2eproto);
    return ::descriptor_table_host_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kChunkOffsetFieldNumber = 1,
  };
  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint32 chunk_offset = 1;
  void clear_chunk_offset();
  ::PROTOBUF_NAMESPACE_ID::uint32 chunk_offset() const;
  void set_chunk_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_chunk_offset() const;
  void _internal_set_chunk_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fp_proto.AudioFrame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 chunk_offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_host_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class HostDataFrame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fp_proto.HostDataFrame) */ {
 public:
  inline HostDataFrame() : HostDataFrame(nullptr) {}
  virtual ~HostDataFrame();

  HostDataFrame(const HostDataFrame& from);
  HostDataFrame(HostDataFrame&& from) noexcept
    : HostDataFrame() {
    *this = ::std::move(from);
  }

  inline HostDataFrame& operator=(const HostDataFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostDataFrame& operator=(HostDataFrame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HostDataFrame& default_instance();

  enum DataFrameCase {
    kVideo = 4,
    kAudio = 5,
    DATAFRAME_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HostDataFrame* internal_default_instance() {
    return reinterpret_cast<const HostDataFrame*>(
               &_HostDataFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(HostDataFrame& a, HostDataFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(HostDataFrame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HostDataFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HostDataFrame* New() const final {
    return CreateMaybeMessage<HostDataFrame>(nullptr);
  }

  HostDataFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HostDataFrame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HostDataFrame& from);
  void MergeFrom(const HostDataFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HostDataFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fp_proto.HostDataFrame";
  }
  protected:
  explicit HostDataFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_host_5fmessages_2eproto);
    return ::descriptor_table_host_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrameNumFieldNumber = 1,
    kFrameSizeFieldNumber = 2,
    kStreamPointFieldNumber = 3,
    kVideoFieldNumber = 4,
    kAudioFieldNumber = 5,
  };
  // uint32 frame_num = 1;
  void clear_frame_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 frame_num() const;
  void set_frame_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_frame_num() const;
  void _internal_set_frame_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 frame_size = 2;
  void clear_frame_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 frame_size() const;
  void set_frame_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_frame_size() const;
  void _internal_set_frame_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 stream_point = 3;
  void clear_stream_point();
  ::PROTOBUF_NAMESPACE_ID::uint32 stream_point() const;
  void set_stream_point(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stream_point() const;
  void _internal_set_stream_point(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .fp_proto.VideoFrame video = 4;
  bool has_video() const;
  private:
  bool _internal_has_video() const;
  public:
  void clear_video();
  const ::fp_proto::VideoFrame& video() const;
  ::fp_proto::VideoFrame* release_video();
  ::fp_proto::VideoFrame* mutable_video();
  void set_allocated_video(::fp_proto::VideoFrame* video);
  private:
  const ::fp_proto::VideoFrame& _internal_video() const;
  ::fp_proto::VideoFrame* _internal_mutable_video();
  public:
  void unsafe_arena_set_allocated_video(
      ::fp_proto::VideoFrame* video);
  ::fp_proto::VideoFrame* unsafe_arena_release_video();

  // .fp_proto.AudioFrame audio = 5;
  bool has_audio() const;
  private:
  bool _internal_has_audio() const;
  public:
  void clear_audio();
  const ::fp_proto::AudioFrame& audio() const;
  ::fp_proto::AudioFrame* release_audio();
  ::fp_proto::AudioFrame* mutable_audio();
  void set_allocated_audio(::fp_proto::AudioFrame* audio);
  private:
  const ::fp_proto::AudioFrame& _internal_audio() const;
  ::fp_proto::AudioFrame* _internal_mutable_audio();
  public:
  void unsafe_arena_set_allocated_audio(
      ::fp_proto::AudioFrame* audio);
  ::fp_proto::AudioFrame* unsafe_arena_release_audio();

  void clear_DataFrame();
  DataFrameCase DataFrame_case() const;
  // @@protoc_insertion_point(class_scope:fp_proto.HostDataFrame)
 private:
  class _Internal;
  void set_has_video();
  void set_has_audio();

  inline bool has_DataFrame() const;
  inline void clear_has_DataFrame();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 frame_num_;
  ::PROTOBUF_NAMESPACE_ID::uint32 frame_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stream_point_;
  union DataFrameUnion {
    DataFrameUnion() {}
    ::fp_proto::VideoFrame* video_;
    ::fp_proto::AudioFrame* audio_;
  } DataFrame_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_host_5fmessages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VideoFrame

// uint32 chunk_offset = 1;
inline void VideoFrame::clear_chunk_offset() {
  chunk_offset_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VideoFrame::_internal_chunk_offset() const {
  return chunk_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VideoFrame::chunk_offset() const {
  // @@protoc_insertion_point(field_get:fp_proto.VideoFrame.chunk_offset)
  return _internal_chunk_offset();
}
inline void VideoFrame::_internal_set_chunk_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  chunk_offset_ = value;
}
inline void VideoFrame::set_chunk_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_chunk_offset(value);
  // @@protoc_insertion_point(field_set:fp_proto.VideoFrame.chunk_offset)
}

// bool is_idr_frame = 2;
inline void VideoFrame::clear_is_idr_frame() {
  is_idr_frame_ = false;
}
inline bool VideoFrame::_internal_is_idr_frame() const {
  return is_idr_frame_;
}
inline bool VideoFrame::is_idr_frame() const {
  // @@protoc_insertion_point(field_get:fp_proto.VideoFrame.is_idr_frame)
  return _internal_is_idr_frame();
}
inline void VideoFrame::_internal_set_is_idr_frame(bool value) {
  
  is_idr_frame_ = value;
}
inline void VideoFrame::set_is_idr_frame(bool value) {
  _internal_set_is_idr_frame(value);
  // @@protoc_insertion_point(field_set:fp_proto.VideoFrame.is_idr_frame)
}

// bytes data = 3;
inline void VideoFrame::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& VideoFrame::data() const {
  // @@protoc_insertion_point(field_get:fp_proto.VideoFrame.data)
  return _internal_data();
}
inline void VideoFrame::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:fp_proto.VideoFrame.data)
}
inline std::string* VideoFrame::mutable_data() {
  // @@protoc_insertion_point(field_mutable:fp_proto.VideoFrame.data)
  return _internal_mutable_data();
}
inline const std::string& VideoFrame::_internal_data() const {
  return data_.Get();
}
inline void VideoFrame::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VideoFrame::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fp_proto.VideoFrame.data)
}
inline void VideoFrame::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fp_proto.VideoFrame.data)
}
inline void VideoFrame::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fp_proto.VideoFrame.data)
}
inline std::string* VideoFrame::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VideoFrame::release_data() {
  // @@protoc_insertion_point(field_release:fp_proto.VideoFrame.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VideoFrame::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fp_proto.VideoFrame.data)
}

// -------------------------------------------------------------------

// AudioFrame

// uint32 chunk_offset = 1;
inline void AudioFrame::clear_chunk_offset() {
  chunk_offset_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AudioFrame::_internal_chunk_offset() const {
  return chunk_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AudioFrame::chunk_offset() const {
  // @@protoc_insertion_point(field_get:fp_proto.AudioFrame.chunk_offset)
  return _internal_chunk_offset();
}
inline void AudioFrame::_internal_set_chunk_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  chunk_offset_ = value;
}
inline void AudioFrame::set_chunk_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_chunk_offset(value);
  // @@protoc_insertion_point(field_set:fp_proto.AudioFrame.chunk_offset)
}

// bytes data = 2;
inline void AudioFrame::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AudioFrame::data() const {
  // @@protoc_insertion_point(field_get:fp_proto.AudioFrame.data)
  return _internal_data();
}
inline void AudioFrame::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:fp_proto.AudioFrame.data)
}
inline std::string* AudioFrame::mutable_data() {
  // @@protoc_insertion_point(field_mutable:fp_proto.AudioFrame.data)
  return _internal_mutable_data();
}
inline const std::string& AudioFrame::_internal_data() const {
  return data_.Get();
}
inline void AudioFrame::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AudioFrame::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fp_proto.AudioFrame.data)
}
inline void AudioFrame::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fp_proto.AudioFrame.data)
}
inline void AudioFrame::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fp_proto.AudioFrame.data)
}
inline std::string* AudioFrame::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AudioFrame::release_data() {
  // @@protoc_insertion_point(field_release:fp_proto.AudioFrame.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AudioFrame::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fp_proto.AudioFrame.data)
}

// -------------------------------------------------------------------

// HostDataFrame

// uint32 frame_num = 1;
inline void HostDataFrame::clear_frame_num() {
  frame_num_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HostDataFrame::_internal_frame_num() const {
  return frame_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HostDataFrame::frame_num() const {
  // @@protoc_insertion_point(field_get:fp_proto.HostDataFrame.frame_num)
  return _internal_frame_num();
}
inline void HostDataFrame::_internal_set_frame_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  frame_num_ = value;
}
inline void HostDataFrame::set_frame_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_frame_num(value);
  // @@protoc_insertion_point(field_set:fp_proto.HostDataFrame.frame_num)
}

// uint32 frame_size = 2;
inline void HostDataFrame::clear_frame_size() {
  frame_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HostDataFrame::_internal_frame_size() const {
  return frame_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HostDataFrame::frame_size() const {
  // @@protoc_insertion_point(field_get:fp_proto.HostDataFrame.frame_size)
  return _internal_frame_size();
}
inline void HostDataFrame::_internal_set_frame_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  frame_size_ = value;
}
inline void HostDataFrame::set_frame_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_frame_size(value);
  // @@protoc_insertion_point(field_set:fp_proto.HostDataFrame.frame_size)
}

// uint32 stream_point = 3;
inline void HostDataFrame::clear_stream_point() {
  stream_point_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HostDataFrame::_internal_stream_point() const {
  return stream_point_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HostDataFrame::stream_point() const {
  // @@protoc_insertion_point(field_get:fp_proto.HostDataFrame.stream_point)
  return _internal_stream_point();
}
inline void HostDataFrame::_internal_set_stream_point(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  stream_point_ = value;
}
inline void HostDataFrame::set_stream_point(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stream_point(value);
  // @@protoc_insertion_point(field_set:fp_proto.HostDataFrame.stream_point)
}

// .fp_proto.VideoFrame video = 4;
inline bool HostDataFrame::_internal_has_video() const {
  return DataFrame_case() == kVideo;
}
inline bool HostDataFrame::has_video() const {
  return _internal_has_video();
}
inline void HostDataFrame::set_has_video() {
  _oneof_case_[0] = kVideo;
}
inline void HostDataFrame::clear_video() {
  if (_internal_has_video()) {
    if (GetArena() == nullptr) {
      delete DataFrame_.video_;
    }
    clear_has_DataFrame();
  }
}
inline ::fp_proto::VideoFrame* HostDataFrame::release_video() {
  // @@protoc_insertion_point(field_release:fp_proto.HostDataFrame.video)
  if (_internal_has_video()) {
    clear_has_DataFrame();
      ::fp_proto::VideoFrame* temp = DataFrame_.video_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    DataFrame_.video_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::fp_proto::VideoFrame& HostDataFrame::_internal_video() const {
  return _internal_has_video()
      ? *DataFrame_.video_
      : *reinterpret_cast< ::fp_proto::VideoFrame*>(&::fp_proto::_VideoFrame_default_instance_);
}
inline const ::fp_proto::VideoFrame& HostDataFrame::video() const {
  // @@protoc_insertion_point(field_get:fp_proto.HostDataFrame.video)
  return _internal_video();
}
inline ::fp_proto::VideoFrame* HostDataFrame::unsafe_arena_release_video() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fp_proto.HostDataFrame.video)
  if (_internal_has_video()) {
    clear_has_DataFrame();
    ::fp_proto::VideoFrame* temp = DataFrame_.video_;
    DataFrame_.video_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void HostDataFrame::unsafe_arena_set_allocated_video(::fp_proto::VideoFrame* video) {
  clear_DataFrame();
  if (video) {
    set_has_video();
    DataFrame_.video_ = video;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fp_proto.HostDataFrame.video)
}
inline ::fp_proto::VideoFrame* HostDataFrame::_internal_mutable_video() {
  if (!_internal_has_video()) {
    clear_DataFrame();
    set_has_video();
    DataFrame_.video_ = CreateMaybeMessage< ::fp_proto::VideoFrame >(GetArena());
  }
  return DataFrame_.video_;
}
inline ::fp_proto::VideoFrame* HostDataFrame::mutable_video() {
  // @@protoc_insertion_point(field_mutable:fp_proto.HostDataFrame.video)
  return _internal_mutable_video();
}

// .fp_proto.AudioFrame audio = 5;
inline bool HostDataFrame::_internal_has_audio() const {
  return DataFrame_case() == kAudio;
}
inline bool HostDataFrame::has_audio() const {
  return _internal_has_audio();
}
inline void HostDataFrame::set_has_audio() {
  _oneof_case_[0] = kAudio;
}
inline void HostDataFrame::clear_audio() {
  if (_internal_has_audio()) {
    if (GetArena() == nullptr) {
      delete DataFrame_.audio_;
    }
    clear_has_DataFrame();
  }
}
inline ::fp_proto::AudioFrame* HostDataFrame::release_audio() {
  // @@protoc_insertion_point(field_release:fp_proto.HostDataFrame.audio)
  if (_internal_has_audio()) {
    clear_has_DataFrame();
      ::fp_proto::AudioFrame* temp = DataFrame_.audio_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    DataFrame_.audio_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::fp_proto::AudioFrame& HostDataFrame::_internal_audio() const {
  return _internal_has_audio()
      ? *DataFrame_.audio_
      : *reinterpret_cast< ::fp_proto::AudioFrame*>(&::fp_proto::_AudioFrame_default_instance_);
}
inline const ::fp_proto::AudioFrame& HostDataFrame::audio() const {
  // @@protoc_insertion_point(field_get:fp_proto.HostDataFrame.audio)
  return _internal_audio();
}
inline ::fp_proto::AudioFrame* HostDataFrame::unsafe_arena_release_audio() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fp_proto.HostDataFrame.audio)
  if (_internal_has_audio()) {
    clear_has_DataFrame();
    ::fp_proto::AudioFrame* temp = DataFrame_.audio_;
    DataFrame_.audio_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void HostDataFrame::unsafe_arena_set_allocated_audio(::fp_proto::AudioFrame* audio) {
  clear_DataFrame();
  if (audio) {
    set_has_audio();
    DataFrame_.audio_ = audio;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fp_proto.HostDataFrame.audio)
}
inline ::fp_proto::AudioFrame* HostDataFrame::_internal_mutable_audio() {
  if (!_internal_has_audio()) {
    clear_DataFrame();
    set_has_audio();
    DataFrame_.audio_ = CreateMaybeMessage< ::fp_proto::AudioFrame >(GetArena());
  }
  return DataFrame_.audio_;
}
inline ::fp_proto::AudioFrame* HostDataFrame::mutable_audio() {
  // @@protoc_insertion_point(field_mutable:fp_proto.HostDataFrame.audio)
  return _internal_mutable_audio();
}

inline bool HostDataFrame::has_DataFrame() const {
  return DataFrame_case() != DATAFRAME_NOT_SET;
}
inline void HostDataFrame::clear_has_DataFrame() {
  _oneof_case_[0] = DATAFRAME_NOT_SET;
}
inline HostDataFrame::DataFrameCase HostDataFrame::DataFrame_case() const {
  return HostDataFrame::DataFrameCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fp_proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_host_5fmessages_2eproto
