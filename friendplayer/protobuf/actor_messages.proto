syntax = "proto3";

import "google/protobuf/any.proto";
import "network_messages.proto";
import "client_messages.proto";

package fp_actor;

message Kill { } // Any actor --> Any actor \ AdminActor

// Administrator Messages

message Cleanup { // Any actor --> AdminActor
    string actor_name = 1;
}

message Create {
    string actor_type_name = 1;
    string actor_name = 2;
    optional google.protobuf.Any init_msg = 3;
    string response_actor = 4;
}

message CreateFinish { // 
    string actor_name = 1;
    string actor_type_name = 2;
    bool succeeded = 3;
}

message Shutdown { }

// Network Messages

message NetworkRecv {
    uint64 address = 1;
    fp_network.Network msg = 2;
}

message NetworkSend {
    uint64 address = 1;
    fp_network.Network msg = 2;
}

// Timer messages

message FireTimer {
    uint64 timer_timestamp = 1;
}

message StartTimer {
    uint32 period_ms = 1;
    bool periodic = 2;
}

message StopTimer { }

// ClientManagerActor

message ClientClientManagerInit {
    string host_ip = 1;
    uint32 host_port = 2;
}

message HostClientManagerInit {
    repeated uint32 monitor_indices = 1;
    uint32 port = 2;
    uint32 num_audio_streams = 3;
}

message ClientHandshakeDone {
    uint64 address = 1;
}

message ClientDisconnect { // ProtocolActor --> ClientManager
    string client_name = 1;
}

message CreateHostActor {
    uint64 host_address = 1;
}

// SocketActor

message SocketInit {
    optional string ip = 1;
    uint32 port = 2;
}

// ProtocolActor

message ProtocolInit {
    uint64 address = 1;
}

message ClientProtocolInit {
    ProtocolInit base_init = 1;
    uint32 video_stream_count = 2;
    uint32 audio_stream_count = 3;
}

// HeartbeatActor

message HeartbeatActorInit {
    uint32 timeout_ms = 1;
    uint32 heartbeat_send_ms = 2;
}

message ClientActorHeartbeatState { // ClientManagerActor --> HeartbeatManager
    string client_actor_name = 1;
    // false -> heartbeat
    // true  -> remove tracker
    bool disconnected = 2;
}

message HeartbeatRequest { } // HeartbeatManager --> ClientActor


// VideoEncodeActor

message VideoData {
    enum FrameType {
        NORMAL = 0;
        IDR = 1;
        PPS_SPS = 2;
    }
    uint64 handle = 1;
    FrameType type = 2;
    uint32 stream_num = 3;
}

message VideoEncodeInit {
    uint32 monitor_idx = 1;
    uint32 stream_num = 2;
}

// VideoDecodeActor

message VideoDecodeInit { 
    uint32 stream_num = 1;
}

message VideoDecoderReady {
    uint32 stream_num = 1;
}

message VideoDataRequest {
    uint32 stream_num = 1;
}

// VideoEncodeActor

message SpecialFrameRequest { // ClientActor --> VideoEncodeActor
    enum FrameType {
        IDR = 0;
        PPS_SPS = 1;
    }
    FrameType type = 1;
}

// AudioActor

message AudioData {
    uint64 handle = 1;
    uint32 stream_num = 2;
}

// AudioDecodeActor

message AudioDecodeInit { 
    uint32 stream_num = 1;
}

// AudioEncodeActor

message AudioEncodeInit { 
    uint32 stream_num = 1;
}

// InputActor

message MonitorEnumIndex {
    int monitor_enum_index = 1;
    int stream_num = 2;
}

message InputData {
    string actor_name = 1;
    oneof DataFrame {
        fp_network.KeyboardFrame keyboard = 2;
        fp_network.MouseButtonFrame mouse_button = 3;
        fp_network.MouseMotionFrame mouse_motion = 4;
        fp_network.ControllerFrame controller = 5;
    }
}

message UnregisterInputUser {
    string actor_name = 1;
}